{"variants":[{"paths":["\/documentation\/composablearchitecture\/migratingto1.4"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}],"title":"Migrating to 1.4","role":"article"},"kind":"article","identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture is under constant development, and we are always looking for ways to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs"},{"text":" ","type":"text"},{"type":"text","text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest"},{"text":" ","type":"text"},{"text":"APIs, and this article contains some tips for doing so.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Using-the-Reducer-macro","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Using-case-key-paths"}]}]},{"content":[{"inlineContent":[{"identifier":"#Receiving-test-store-actions","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Moving-off-of-TaskResult"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Identified-actions","isActive":true}]}]}]},{"level":3,"anchor":"Using-the-Reducer-macro","text":"Using the @Reducer macro","type":"heading"},{"inlineContent":[{"type":"text","text":"Version 1.4 of the library has introduced a new macro for automating certain aspects of implementing"},{"type":"text","text":" "},{"type":"text","text":"a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"type":"text","text":". It is called "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":", and to migrate existing code one only needs to annotate"},{"text":" ","type":"text"},{"type":"text","text":"their type with "},{"type":"codeVoice","code":"@Reducer"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":["+@Reducer"," struct MyFeature: Reducer {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"No other changes to be made, and you can immediately start taking advantage of new capabilities of"},{"type":"text","text":" "},{"text":"reducer composition, such as case key paths (see guides below). See the documentation of","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":" to see everything that macro adds to your feature’s reducer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can also technically drop the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" conformance:"}]},{"type":"codeListing","syntax":"diff","code":[" @Reducer","-struct MyFeature: Reducer {","+struct MyFeature {","   \/\/ ..."," }"]},{"inlineContent":[{"type":"text","text":"However, there are some known issues in Xcode that cause autocomplete and type inference to break."},{"type":"text","text":" "},{"text":"See the documentation of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas"},{"type":"text","text":" for more gotchas on using the "},{"code":"@Reducer","type":"codeVoice"},{"type":"text","text":" macro."}],"type":"paragraph"},{"anchor":"Using-case-key-paths","type":"heading","text":"Using case key paths","level":3},{"inlineContent":[{"type":"text","text":"In version 1.4 we soft-deprecated many APIs that take the "},{"code":"CasePath","type":"codeVoice"},{"text":" type in favor of APIs that take","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"what is known as a "},{"type":"codeVoice","code":"CaseKeyPath"},{"text":". Both of these types come from our ","type":"text"},{"isActive":true,"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},{"type":"text","text":" "},{"type":"text","text":"library and aim to allow one to abstract over the shape of enums just as key paths allow one to do"},{"type":"text","text":" "},{"text":"so with structs.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, in conjunction with version 1.4 of this library we also released an update to CasePaths"},{"type":"text","text":" "},{"text":"that massively improved the ergonomics of using case paths. We introduced the ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"text":" macro","type":"text"},{"text":" ","type":"text"},{"text":"for automatically deriving case paths so that we could stop using runtime reflection, and we","type":"text"},{"type":"text","text":" "},{"type":"text","text":"introduced a way of using key paths to describe case paths. And so the old "},{"code":"CasePath","type":"codeVoice"},{"type":"text","text":" type has been"},{"text":" ","type":"text"},{"text":"deprecated, and the new ","type":"text"},{"code":"CaseKeyPath","type":"codeVoice"},{"type":"text","text":" type has taken its place."}]},{"inlineContent":[{"type":"text","text":"This means that previously when you would use APIs involving case paths you would have to use the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\/"},{"text":" prefix operator to derive the case path. For example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \/Action.child) {","  ChildFeature()","}"]},{"type":"paragraph","inlineContent":[{"text":"You now get to shorten that into a far simpler, more familiar key path syntax:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \\.child) {","  ChildFeature()","}"]},{"inlineContent":[{"type":"text","text":"To be able to take advantage of this syntax with your feature’s actions, you must annotate your"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"type":"text","text":" conformances with the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":" macro:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"Which automatically applies the "},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" macro to the feature’s "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum among other"},{"text":" ","type":"text"},{"type":"text","text":"things:"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"]},{"inlineContent":[{"type":"text","text":"Further, if the feature’s "},{"code":"State","type":"codeVoice"},{"type":"text","text":" is an enum, "},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" will also be applied, along with"},{"type":"text","text":" "},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dynamic member lookups allows a state’s associated value to be accessed via dot-syntax, which can be"},{"type":"text","text":" "},{"text":"useful when scoping a store’s state to a specific case:","type":"text"}]},{"type":"codeListing","syntax":"diff","code":[" IfLetStore(","   store.scope(","-    state: \/Feature.State.tray, action: Feature.Action.tray","+    state: \\.tray, action: { .tray($0) }","   )",") { store in","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To form a case key path for any other enum, you must apply the "},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro explicitly:","type":"text"}]},{"code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And to access its associated values, you must also apply the "},{"code":"@dynamicMemberLookup","type":"codeVoice"},{"type":"text","text":" attributes:"}]},{"type":"codeListing","syntax":"swift","code":["@CasePathable","@dynamicMemberLookup","enum DestinationState {","  case tray(Tray.State)","}"]},{"inlineContent":[{"type":"text","text":"Anywhere you previously used the "},{"code":"\/","type":"codeVoice"},{"text":" prefix operator for case paths you should now be able to use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"key path syntax, so long as all of the enums involved are "},{"code":"@CasePathable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you encounter any problems, create a "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","isActive":true,"type":"reference"},{"text":" on the Composable Architecture","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"repo."}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"Receiving-test-store-actions","text":"Receiving test store actions"},{"type":"paragraph","inlineContent":[{"text":"The power of case key paths and the ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" macro has made it possible to massively simplify"},{"type":"text","text":" "},{"type":"text","text":"how one asserts on actions received in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":". Instead of constructing the concrete action"},{"type":"text","text":" "},{"text":"received from an effect like this:","type":"text"}]},{"code":["store.receive(.child(.presented(.response(.success(\"Hello!\")))))"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…you can use key path syntax to describe the nesting of action cases that is received:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.child.presented.response.success)"]},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Case key path syntax requires that every nested action is ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":". Reducer actions"},{"text":" ","type":"text"},{"type":"text","text":"are typically "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" automatically via the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro, but other enums must be"},{"type":"text","text":" "},{"text":"explicitly annotated:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"]}],"type":"aside"},{"inlineContent":[{"text":"And in the case of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"text":" you can even omit the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","isActive":true},{"type":"text","text":" "},{"text":"path component:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.child.response.success)"]},{"inlineContent":[{"text":"This does not assert on the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"data","type":"text"}]},{"type":"text","text":" received in the action, but typically that is already covered"},{"text":" ","type":"text"},{"text":"by the state assertion made inside the trailing closure of ","type":"text"},{"code":"receive","type":"codeVoice"},{"type":"text","text":". And if you use this style of"},{"type":"text","text":" "},{"type":"text","text":"action receiving exclusively, you can even stop conforming your action types to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are a few advanced situations to be aware of. When receiving an action that involves an"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true},{"type":"text","text":" (more information below in "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","isActive":true},{"type":"text","text":"), then"},{"type":"text","text":" "},{"type":"text","text":"you can use the subscript "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","isActive":true},{"type":"text","text":" to"},{"text":" ","type":"text"},{"text":"receive a particular action for an element:","type":"text"}],"type":"paragraph"},{"code":["store.receive(\\.rows[id: 0].response.success)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And the same goes for "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true},{"text":" too:","type":"text"}]},{"syntax":"swift","code":["store.receive(\\.path[id: 0].response.success)"],"type":"codeListing"},{"level":3,"text":"Moving off of TaskResult","type":"heading","anchor":"Moving-off-of-TaskResult"},{"inlineContent":[{"type":"text","text":"In version 1.4 of the library, the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"type":"text","text":" was soft-deprecated and eventually will be fully"},{"type":"text","text":" "},{"text":"deprecated and then removed. The original rationale for the introduction of ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"type":"text","text":" was to"},{"type":"text","text":" "},{"type":"text","text":"make an equatable-friendly version of "},{"code":"Result","type":"codeVoice"},{"type":"text","text":" for when the error produced was "},{"code":"any Error","type":"codeVoice"},{"text":", which is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not equatable. And the reason to want an equatable-friendly result is so that the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" type in"},{"text":" ","type":"text"},{"text":"reducers can be equatable, and the reason for ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"that","type":"text"}]},{"text":" is to make it possible to test actions","type":"text"},{"text":" ","type":"text"},{"text":"emitted by effects.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Typically in tests, when one wants to assert that the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" received an action you must","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specify a concrete action:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(.response(.success(\"Hello!\"))) {","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"text":" uses the equatable conformance of ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" to confirm that you are asserting that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the store received the correct action."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"However, this becomes verbose when testing deeply nested features, which is common in integration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"tests:"}]},{"code":["store.receive(.child(.response(.success(\"Hello!\")))) {","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, with the introduction of "},{"overridingTitle":"case key paths","isActive":true,"overridingTitleInlineContent":[{"text":"case key paths","type":"text"}],"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},{"text":" we greatly improved the","type":"text"},{"text":" ","type":"text"},{"text":"ergonomics of referring to deeply nested enums. You can now use key path syntax to describe the","type":"text"},{"type":"text","text":" "},{"text":"case of the enum you expect to receive, and you can even omit the associated data from the action","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"since typically that is covered in the state assertion:"}]},{"syntax":"swift","code":["store.receive(\\.child.response.success) {","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And this syntax does not require the ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum to be equatable since we are only asserting that"},{"type":"text","text":" "},{"type":"text","text":"the case of the action was received. We are not testing the data in the action."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We feel that with this better syntax there is less of a reason to have "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" and so we"},{"text":" ","type":"text"},{"type":"text","text":"do plan on removing it eventually. If you have an important use case for "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference"},{"type":"text","text":" that you"},{"text":" ","type":"text"},{"type":"text","text":"think merits it being in the library, please "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","overridingTitle":"open a discussion","overridingTitleInlineContent":[{"type":"text","text":"open a discussion"}]},{"type":"text","text":"."}]},{"text":"Identified actions","anchor":"Identified-actions","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 of the library we introduced the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true,"type":"reference"},{"type":"text","text":" type which makes it more"},{"text":" ","type":"text"},{"type":"text","text":"ergonomic to bundle the data needed for actions in collections of data. Previously you would"},{"type":"text","text":" "},{"type":"text","text":"have a case in your "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum for a particular row that holds the ID of the state being acted"},{"type":"text","text":" "},{"type":"text","text":"upon as well as the action:"}]},{"type":"codeListing","code":["enum Action {","  \/\/ ...","  case row(id: State.ID, action: Action)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This can be updated to hold onto ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"text":" instead of those piece of data directly in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"case:"}]},{"syntax":"swift","code":["enum Action {","  \/\/ ...","  case rows(IdentifiedActionOf<Nested>)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"And in the reducer, instead of invoking"},{"text":" ","type":"text"},{"code":"Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-3dw7i","type":"codeVoice"},{"text":" with a case path using the","type":"text"},{"text":" ","type":"text"},{"code":"\/","type":"codeVoice"},{"text":" prefix operator:","type":"text"}],"type":"paragraph"},{"code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \/Action.row(id:action:)) {","  RowFeature()","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"…you will instead use key path syntax to determine which case of the ","type":"text"},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum holds the"},{"type":"text","text":" "},{"text":"identified action:","type":"text"}]},{"syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \\.rows) {","  RowFeature()","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This syntax is shorter, more familiar, and can better leverage Xcode autocomplete and"},{"text":" ","type":"text"},{"type":"text","text":"type-inference."}]},{"inlineContent":[{"type":"text","text":"One last change you will need to make is anywhere you are destructuring the old-style action you"},{"type":"text","text":" "},{"text":"will need to insert a ","type":"text"},{"type":"codeVoice","code":".element"},{"type":"text","text":" layer:"}],"type":"paragraph"},{"syntax":"diff","type":"codeListing","code":["-case let .row(id: id, action: .buttonTapped):","+case let .rows(.element(id: id, action: .buttonTapped)):"]}]}],"sections":[],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"]}],"abstract":[{"type":"text","text":"Update your code to make use of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":" macro, and learn how to better leverage case key","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"paths in your features."}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"title":"Shared","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","url":"\/documentation\/composablearchitecture\/shared","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Shared","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Shared"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"type":"topic","title":"TestStore","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"title":"Migrating to 1.8","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","abstract":[{"text":"Update your code to make use of the new capabilities of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, including automatic"},{"text":" ","type":"text"},{"text":"fulfillment of requirements for destination reducers and path reducers.","type":"text"}],"role":"article","type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.8"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"title":"ForEachStore","deprecated":true,"navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","role":"symbol","url":"\/documentation\/composablearchitecture\/foreachstore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ForEachStore","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"type":"text","text":" "},{"text":"collections of state.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/withLock(_:)":{"role":"symbol","abstract":[{"type":"text","text":"Perform an operation on shared state with isolated access to the underlying value."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"withLock","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"}],"kind":"symbol","title":"withLock(_:)","url":"\/documentation\/composablearchitecture\/shared\/withlock(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"kind":"symbol","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"url":"\/documentation\/composablearchitecture\/reducer()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"topic","role":"symbol","title":"Reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"#Receiving-test-store-actions":{"type":"link","title":"Receiving test store actions","titleInlineContent":[{"type":"text","text":"Receiving test store actions"}],"identifier":"#Receiving-test-store-actions","url":"#Receiving-test-store-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction/AllCasePaths-swift.struct/subscript(id:)":{"title":"subscript(id:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/identifiedaction\/allcasepaths-swift.struct\/subscript(id:)","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","fragments":[{"text":"subscript","kind":"keyword"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"id"},{"text":" _: ","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:9CasePaths03AnyA4PathV","kind":"typeIdentifier","text":"AnyCasePath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","text":"IdentifiedAction"},{"kind":"text","text":"<"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","url":"\/documentation\/composablearchitecture\/reducer","type":"topic","title":"Reducer","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"kind":"symbol","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","url":"\/documentation\/composablearchitecture\/taskresult","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"}],"title":"TaskResult","abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swift’s ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"type":"text","text":" "},{"type":"text","text":"untyped "},{"code":"Error","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"role":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a list."}],"navigatorTitle":[{"kind":"identifier","text":"IdentifiedAction"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IdentifiedAction"}],"title":"IdentifiedAction","kind":"symbol","url":"\/documentation\/composablearchitecture\/identifiedaction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8877x":{"role":"symbol","abstract":[{"text":"Sends an action to the store and asserts when state changes.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","text":"TestStoreTask"}],"kind":"symbol","title":"send(_:assert:fileID:file:line:column:)","url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8877x","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"url":"\/documentation\/composablearchitecture\/migratingto1.6","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","title":"Migrating to 1.6","kind":"article","role":"article","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","isActive":true},{"text":" method when you need to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"assert on the payload inside an action received."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","title":"Identified actions","url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions","abstract":[],"type":"topic","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"url":"\/documentation\/composablearchitecture\/effect","type":"topic","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture20_SendableCaseKeyPatha","text":"_SendableCaseKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">, ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s8DurationV","text":"Duration","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-9jd7x","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","title":"receive(_:_:timeout:assert:fileID:file:line:column:)","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Asserts an action was received matching a case path with a specific payload, and asserts how"},{"type":"text","text":" "},{"text":"the state changes.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer#Gotchas":{"type":"topic","title":"Gotchas","url":"\/documentation\/composablearchitecture\/reducer#Gotchas","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","kind":"section","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"role":"article","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including minimal state observation, presentation and stack navigation."}],"kind":"article","title":"Migrating to 1.13","url":"\/documentation\/composablearchitecture\/migratingto1.13","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"url":"\/documentation\/composablearchitecture\/migratingto1.15","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","title":"Migrating to 1.15","kind":"article","role":"article","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"text":" ","type":"text"},{"text":"concurrency with no warnings or errors.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"navigatorTitle":[{"text":"Store","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/store","title":"Store","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"text":"KeyPath","preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildState"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","title":"scope(state:action:)","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AppStorageKey":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AppStorageKey","kind":"identifier"}],"navigatorTitle":[{"text":"AppStorageKey","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","kind":"symbol","role":"symbol","abstract":[{"text":"A type defining a user defaults persistence strategy.","type":"text"}],"type":"topic","title":"AppStorageKey","url":"\/documentation\/composablearchitecture\/appstoragekey"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"role":"collectionGroup","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"kind":"article","title":"Migration guides","url":"\/documentation\/composablearchitecture\/migrationguides","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"role":"article","abstract":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"type":"text","text":" type is now officially "},{"code":"@MainActor","type":"codeVoice"},{"text":" isolated.","type":"text"}],"kind":"article","title":"Migrating to 1.14","url":"\/documentation\/composablearchitecture\/migratingto1.14","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"url":"\/documentation\/composablearchitecture\/migratingto1.5","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","title":"Migrating to 1.5","kind":"article","role":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true},{"type":"text","text":" operation on "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" ","type":"text"},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"role":"article","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","isActive":true},{"type":"text","text":""},{"text":" ","type":"text"},{"text":"method on ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","isActive":true},{"type":"text","text":" method for overriding dependencies."}],"kind":"article","title":"Migrating to 1.9","url":"\/documentation\/composablearchitecture\/migratingto1.9","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"role":"article","abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"reference"},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true},{"text":", and more.","type":"text"}],"kind":"article","title":"Migrating to 1.7","url":"\/documentation\/composablearchitecture\/migratingto1.7","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"url":"\/documentation\/composablearchitecture\/migratingto1.12","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","title":"Migrating to 1.12","kind":"article","role":"article","abstract":[{"text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence","type":"text"},{"type":"text","text":" "},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FileStorageKey":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FileStorageKey"}],"url":"\/documentation\/composablearchitecture\/filestoragekey","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","title":"FileStorageKey","navigatorTitle":[{"kind":"identifier","text":"FileStorageKey"}],"kind":"symbol","role":"symbol","abstract":[{"text":"A type defining a file persistence strategy","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"url":"\/documentation\/composablearchitecture\/migratingto1.10","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","title":"Migrating to 1.10","kind":"article","role":"article","abstract":[{"text":"Update your code to make use of the new state sharing tools in the library, such as the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"property wrapper, and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","type":"reference"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","isActive":true},{"type":"text","text":" persistence strategies."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"role":"symbol","title":"PresentationAction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"PresentationAction","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction"},"http://github.com/pointfreeco/swift-case-paths":{"type":"link","title":"CasePaths","titleInlineContent":[{"type":"text","text":"CasePaths"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","url":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","role":"symbol","type":"topic","title":"PresentationAction.presented(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"presented","kind":"identifier"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" presentation state."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"role":"article","abstract":[{"type":"text","text":"Update your code to use the new "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)"},{"text":" method for mutating shared state from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"asynchronous contexts, rather than mutating the underlying wrapped value directly."}],"kind":"article","title":"Migrating to 1.11","url":"\/documentation\/composablearchitecture\/migratingto1.11","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","type":"topic"},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"type":"link","title":"discussion","titleInlineContent":[{"type":"text","text":"discussion"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"role":"symbol","abstract":[{"text":"Places a value in the reducer’s dependencies.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"kind":"symbol","title":"dependency(_:)","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","type":"topic"},"#Moving-off-of-TaskResult":{"type":"link","title":"Moving off of TaskResult","titleInlineContent":[{"type":"text","text":"Moving off of "},{"type":"codeVoice","code":"TaskResult"}],"identifier":"#Moving-off-of-TaskResult","url":"#Moving-off-of-TaskResult"},"#Using-the-Reducer-macro":{"type":"link","title":"Using the @Reducer macro","titleInlineContent":[{"type":"text","text":"Using the @Reducer macro"}],"identifier":"#Using-the-Reducer-macro","url":"#Using-the-Reducer-macro"},"#Identified-actions":{"type":"link","title":"Identified actions","titleInlineContent":[{"type":"text","text":"Identified actions"}],"identifier":"#Identified-actions","url":"#Identified-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"title":"IfLetStore","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"IfLetStore","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"url":"\/documentation\/composablearchitecture\/ifletstore","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"title":"StackAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","url":"\/documentation\/composablearchitecture\/stackaction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"StackAction","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/withviewstore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"text":"by a view builder.","type":"text"}],"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"deprecated":true,"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"topic","title":"WithViewStore"},"#Using-case-key-paths":{"type":"link","title":"Using case key paths","titleInlineContent":[{"type":"text","text":"Using case key paths"}],"identifier":"#Using-case-key-paths","url":"#Using-case-key-paths"}}}