{"sections":[],"topicSections":[{"anchor":"Building-Content","title":"Building Content","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"]},{"title":"Initializers","anchor":"Initializers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/init(_:content:)"],"generated":true},{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/body","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/content","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/store"],"title":"Instance Properties","anchor":"Instance-Properties"},{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/View-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/View-Implementations"],"title":"Default Implementations","anchor":"Default-Implementations"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/switchstore"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"]]},"deprecationSummary":[{"inlineContent":[{"text":"Use 'switch' with a store of observable state, instead. For more information, see the following article: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Replacing-SwitchStore-and-CaseLet-with-switch-and-case]","type":"text"}],"type":"paragraph"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","isActive":true},{"type":"text","text":" views."}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/ComposableArchitecture\/s8SendableP","doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"],"title":"Conforms To","type":"conformsTo"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},"seeAlsoSections":[{"generated":true,"title":"View containers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"],"anchor":"View-containers"}],"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SwitchStore","kind":"identifier"}],"title":"SwitchStore","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Structure","externalID":"s:22ComposableArchitecture11SwitchStoreV","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"platforms":[],"role":"symbol","symbolKind":"struct"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"attribute","text":"@"},{"kind":"attribute","text":"MainActor","preciseIdentifier":"s:ScM"},{"kind":"text","text":" "},{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SwitchStore","kind":"identifier"},{"text":"<","kind":"text"},{"text":"State","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Action","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Content","kind":"genericParameter"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Content","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"View","preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"An application may model parts of its state with enums. For example, app state may differ if a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"user is logged-in or not:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct AppFeature {","  enum State {","    case loggedIn(LoggedInState)","    case loggedOut(LoggedOutState)","  }","  \/\/ ...","}"]},{"inlineContent":[{"text":"In the view layer, a store on this state can switch over each case using a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","isActive":true,"type":"reference"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"text":" view per case:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    SwitchStore(self.store) { state in","      switch state {","      case .loggedIn:","        CaseLet(","          \/AppFeature.State.loggedIn, action: AppFeature.Action.loggedIn","        ) { loggedInStore in","          LoggedInView(store: loggedInStore)","        }","      case .loggedOut:","        CaseLet(","          \/AppFeature.State.loggedOut, action: AppFeature.Action.loggedOut","        ) { loggedOutStore in","          LoggedOutView(store: loggedOutStore)","        }","      }","    }","  }","}"]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SwitchStore"},{"text":" view builder is only evaluated when the case of state passed to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it changes. As such, you should not rely on this value for anything other than checking the"},{"type":"text","text":" "},{"type":"text","text":"current case, "},{"inlineContent":[{"type":"text","text":"e.g."}],"type":"emphasis"},{"text":" by switching on it and routing to an appropriate ","type":"text"},{"type":"codeVoice","code":"CaseLet"},{"type":"text","text":"."}]}],"style":"important","type":"aside","name":"Important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifCaseLet(_:action:then:fileID:filePath:line:column:)-7sg8d","isActive":true},{"type":"text","text":" and"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/init(state:action:child:fileID:filePath:line:column:)-9g44g","type":"reference"},{"type":"text","text":" for embedding reducers"},{"type":"text","text":" "},{"text":"that operate on each case of an enum in reducers that operate on the entire enum.","type":"text"}]}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/content":{"abstract":[],"title":"content","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"content","kind":"identifier"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Content"}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/switchstore\/content","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/content","role":"symbol","type":"topic","kind":"symbol"},"doc://ComposableArchitecture/7SwiftUI4ViewP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP","title":"SwiftUICore.View"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/init(_:content:)":{"abstract":[],"title":"init(_:content:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier","text":"Store"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"content"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"text":"Content","kind":"typeIdentifier"},{"kind":"text","text":")"}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/switchstore\/init(_:content:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/init(_:content:)","role":"symbol","type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"title":"NavigationStackStore","url":"\/documentation\/composablearchitecture\/navigationstackstore","navigatorTitle":[{"kind":"identifier","text":"NavigationStackStore"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"NavigationStackStore"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","kind":"symbol","abstract":[{"text":"A navigation stack that is driven by a store.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"title":"SwitchStore","url":"\/documentation\/composablearchitecture\/switchstore","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"text":" views.","type":"text"}],"deprecated":true,"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/withviewstore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"text":"by a view builder.","type":"text"}],"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"deprecated":true,"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"topic","title":"WithViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"title":"Deprecations","url":"\/documentation\/composablearchitecture\/swiftuideprecations","type":"topic","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}],"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"title":"IfLetStore","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"IfLetStore","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"url":"\/documentation\/composablearchitecture\/ifletstore","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope/init(state:action:child:fileID:filePath:line:column:)-9g44g":{"url":"\/documentation\/composablearchitecture\/scope\/init(state:action:child:fileid:filepath:line:column:)-9g44g","kind":"symbol","role":"symbol","title":"init(state:action:child:fileID:filePath:line:column:)","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ParentState"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"text":"ParentAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"child"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Child"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/init(state:action:child:fileID:filePath:line:column:)-9g44g","abstract":[{"type":"text","text":"Initializes a reducer that runs the given child reducer against a slice of parent state and"},{"type":"text","text":" "},{"text":"actions.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationLinkStore":{"abstract":[{"type":"text","text":"A view that controls a navigation presentation."}],"navigatorTitle":[{"text":"NavigationLinkStore","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"NavigationLinkStore"}],"title":"NavigationLinkStore","deprecated":true,"url":"\/documentation\/composablearchitecture\/navigationlinkstore","role":"symbol","type":"topic"},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"title":"ForEachStore","deprecated":true,"navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","role":"symbol","url":"\/documentation\/composablearchitecture\/foreachstore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ForEachStore","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"type":"text","text":" "},{"text":"collections of state.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"navigatorTitle":[{"text":"Store","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/store","title":"Store","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/body":{"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/body","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP","text":"View"}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/switchstore\/body","abstract":[],"title":"body"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"role":"collectionGroup","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","title":"SwiftUI Integration","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/store":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/store","role":"symbol","title":"store","url":"\/documentation\/composablearchitecture\/switchstore\/store","fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"store"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"deprecated":true,"type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"title":"CaseLet","url":"\/documentation\/composablearchitecture\/caselet","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CaseLet"}],"abstract":[{"type":"text","text":"A view that handles a specific case of enum state in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"text":".","type":"text"}],"deprecated":true,"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseLet"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/View-Implementations":{"abstract":[],"type":"topic","url":"\/documentation\/composablearchitecture\/switchstore\/view-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/View-Implementations","kind":"article","title":"View Implementations","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"abstract":[{"text":"A ","type":"text"},{"code":"ViewStore","type":"codeVoice"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"deprecated":true,"role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/viewstore","title":"ViewStore","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifCaseLet(_:action:then:fileID:filePath:line:column:)-7sg8d":{"url":"\/documentation\/composablearchitecture\/reducer\/ifcaselet(_:action:then:fileid:filepath:line:column:)-7sg8d","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifCaseLet(_:action:then:fileID:filePath:line:column:)-7sg8d","type":"topic","title":"ifCaseLet(_:action:then:fileID:filePath:line:column:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifCaseLet","kind":"identifier"},{"kind":"text","text":"<"},{"text":"CaseState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"CaseAction"},{"text":", ","kind":"text"},{"text":"Case","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"CaseState"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"text":"CaseAction","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"then"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Case"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"text":"_IfCaseLetReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Case","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on a case of parent enum state."}],"kind":"symbol","role":"symbol"}}}