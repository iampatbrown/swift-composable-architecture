{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"},{"kind":"text","text":"<"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":">","kind":"text"}]}]},{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" protocol describes how to evolve the current state of an application to the next","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state, given an action, and describes what "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference"},{"type":"text","text":"s should be executed later by the store, if"},{"text":" ","type":"text"},{"text":"any. Types that conform to this protocol represent the domain, logic and behavior for a feature.","type":"text"},{"type":"text","text":" "},{"text":"Conformances to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" can be written by hand, but the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" can make your reducers"},{"text":" ","type":"text"},{"text":"more concise and more powerful.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"#Conforming-to-the-Reducer-protocol","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Using-the-Reducer-macro"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#CasePathable-and-dynamicMemberLookup-enums","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Automatic-fulfillment-of-reducer-requirements","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Destination-and-path-reducers"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"#Navigating-to-non-reducer-features","type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"#Synthesizing-protocol-conformances-on-State-and-Action","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Nested-enum-reducers","type":"reference","isActive":true}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Gotchas","isActive":true}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Autocomplete"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Preview-and-enum-reducers","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#CI-build-failures","isActive":true}]}]}]}]}],"type":"unorderedList"}]}]},{"text":"Conforming to the Reducer protocol","anchor":"Conforming-to-the-Reducer-protocol","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The bare minimum of conforming to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol is to provide a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"text":" type","type":"text"},{"type":"text","text":" "},{"text":"that represents the state your feature needs to do its job, a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action"},{"type":"text","text":" type that"},{"text":" ","type":"text"},{"text":"represents the actions users can perform in your feature (as well as actions that effects can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"feed back into the system), and a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true},{"text":" property that compose your feature","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"together with any other features that are needed (such as for navigation)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a very simple example, a “counter” feature could model its state as a struct holding an integer:"}]},{"code":["struct CounterFeature: Reducer {","  @ObservableState","  struct State {","    var count = 0","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"We have added the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" to "},{"type":"codeVoice","code":"State"},{"type":"text","text":" here so that the view can automatically"},{"text":" ","type":"text"},{"type":"text","text":"observe state changes. In future versions of the library this macro will be automatically applied"},{"type":"text","text":" "},{"text":"by the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro."}]}]},{"inlineContent":[{"type":"text","text":"The actions would be just two cases for tapping an increment or decrement button:"}],"type":"paragraph"},{"code":["struct CounterFeature: Reducer {","  \/\/ ...","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The logic of your feature is implemented by mutating the feature’s current state when an action"},{"type":"text","text":" "},{"text":"comes into the system. This is most easily done by constructing a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce"},{"text":" inside the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true},{"text":" of your reducer:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct CounterFeature: Reducer {","  \/\/ ...","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","      case .incrementButtonTapped:","        state.count += 1  ","        return .none","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","isActive":true},{"type":"text","text":" reducer’s first responsibility is to mutate the feature’s current state given an"},{"text":" ","type":"text"},{"text":"action. Its second responsibility is to return effects that will be executed asynchronously and feed","type":"text"},{"text":" ","type":"text"},{"text":"their data back into the system. Currently ","type":"text"},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" does not need to run any effects, and so"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","type":"reference"},{"type":"text","text":" is returned."}]},{"inlineContent":[{"type":"text","text":"If the feature does need to do effectful work, then more would need to be done. For example, suppose"},{"text":" ","type":"text"},{"text":"the feature has the ability to start and stop a timer, and with each tick of the timer the ","type":"text"},{"code":"count","type":"codeVoice"},{"type":"text","text":" "},{"text":"will be incremented. That could be done like so:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct CounterFeature: Reducer {","  @ObservableState","  struct State {","    var count = 0","  }","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","    case startTimerButtonTapped","    case stopTimerButtonTapped","    case timerTick","  }","  enum CancelID { case timer }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","","      case .incrementButtonTapped:","        state.count += 1","        return .none","","      case .startTimerButtonTapped:","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","        .cancellable(CancelID.timer)","","      case .stopTimerButtonTapped:","        return .cancel(CancelID.timer)","","      case .timerTick:","        state.count += 1","        return .none","      }","    }","  }","}"]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This sample emulates a timer by performing an infinite loop with a "},{"code":"Task.sleep","type":"codeVoice"},{"text":" inside. This","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is simple to do, but is also inaccurate since small imprecisions can accumulate. It would be"},{"type":"text","text":" "},{"type":"text","text":"better to inject a clock into the feature so that you could use its "},{"code":"timer","type":"codeVoice"},{"text":" method. Read the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement"},{"type":"text","text":" and "},{"text":"doc:Testing","type":"text"},{"text":" articles for more information.","type":"text"}]}],"name":"Note"},{"type":"paragraph","inlineContent":[{"text":"That is the basics of implementing a feature as a conformance to ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":"."}]},{"anchor":"Using-the-Reducer-macro","level":2,"type":"heading","text":"Using the @Reducer macro"},{"type":"paragraph","inlineContent":[{"text":"While you technically can conform to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol directly, as we did above, the"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"text":" macro can automate many aspects of implementing features for you. At a bare minimum,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"all you have to do is annotate your reducer with "},{"type":"codeVoice","code":"@Reducer"},{"text":" and you can even drop the ","type":"text"},{"code":"Reducer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"conformance:"}]},{"syntax":"diff","type":"codeListing","code":["+@Reducer","-struct CounterFeature: Reducer {","+struct CounterFeature {","   @ObservableState","   struct State {","     var count = 0","   }","   enum Action {","     case decrementButtonTapped","     case incrementButtonTapped","   }","   var body: some ReducerOf<Self> {","     Reduce { state, action in","       switch action {","       case .decrementButtonTapped:","         state.count -= 1","         return .none","       case .incrementButtonTapped:","         state.count += 1  ","         return .none","       }","     }","   }"," }"]},{"type":"paragraph","inlineContent":[{"text":"There are a number of things the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro does for you:"}]},{"text":"@CasePathable and @dynamicMemberLookup enums","anchor":"CasePathable-and-dynamicMemberLookup-enums","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"@Reducer","type":"codeVoice"},{"type":"text","text":" macro automatically applies the "},{"type":"reference","isActive":true,"identifier":"https:\/\/swiftpackageindex.com\/pointfreeco\/swift-case-paths\/main\/documentation\/casepaths\/casepathable()"},{"type":"text","text":" macro to your"},{"text":" ","type":"text"},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum:"}]},{"type":"codeListing","syntax":"diff","code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","isActive":true},{"type":"text","text":" are a tool that bring the power and ergonomics of key paths to enum"},{"type":"text","text":" "},{"text":"cases, and they are a vital tool for composing reducers together.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In particular, having this macro applied to your ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum will allow you to use key path"},{"text":" ","type":"text"},{"type":"text","text":"syntax for specifying enum cases in various APIs in the library, such as"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","isActive":true,"type":"reference"},{"text":", and more.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"reference","isActive":true},{"text":" of your feature is an enum, which is useful for modeling a feature","type":"text"},{"text":" ","type":"text"},{"text":"that can be one of multiple mutually exclusive values, the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"text":" will apply the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"text":" macro, as well as ","type":"text"},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"text":":","type":"text"}]},{"code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ ..."," }"],"syntax":"diff","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This will allow you to use key path syntax for specifying case paths to the "},{"type":"codeVoice","code":"State"},{"type":"text","text":"’s cases, as well"},{"type":"text","text":" "},{"type":"text","text":"as allow you to use dot-chaining syntax for optionally extracting a case from the state. This can be"},{"text":" ","type":"text"},{"text":"useful when using the operators that come with the library that allow for driving navigation from an","type":"text"},{"type":"text","text":" "},{"text":"enum of options:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":[".sheet(","  item: $store.scope(state: \\.destination?.editForm, action: \\.destination.editForm)",") { store in","  FormView(store: store)","}"]},{"inlineContent":[{"type":"text","text":"The syntax "},{"type":"codeVoice","code":"state: \\.destination?.editForm"},{"type":"text","text":" is only possible due to both "},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"@CasePathable"},{"text":" being applied to the ","type":"text"},{"type":"codeVoice","code":"State"},{"type":"text","text":" enum."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Automatic fulfillment of reducer requirements","anchor":"Automatic-fulfillment-of-reducer-requirements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro will automatically fill in any "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"text":" protocol requirements that you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"leave off. For example, something as simple as this compiles:"}]},{"type":"codeListing","code":["@Reducer","struct Feature {}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"@Reducer","type":"codeVoice"},{"text":" macro will automatically insert an empty ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"reference","isActive":true},{"type":"text","text":" struct, an empty"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","isActive":true},{"type":"text","text":" enum, and an empty "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true,"type":"reference"},{"type":"text","text":". This effectively means that"},{"type":"text","text":" "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" is a logicless, behaviorless, inert reducer."}]},{"type":"paragraph","inlineContent":[{"text":"Having these requirements automatically fulfilled for you can be handy for slowly filling them in","type":"text"},{"text":" ","type":"text"},{"text":"with their real implementations. For example, this ","type":"text"},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer could be integrated in a parent"},{"type":"text","text":" "},{"type":"text","text":"domain using the library’s navigation tools, all without having implemented any of the domain yet."},{"text":" ","type":"text"},{"text":"Then, once we are ready we can start implementing the real logic and behavior of the feature.","type":"text"}]},{"text":"Destination and path reducers","level":3,"type":"heading","anchor":"Destination-and-path-reducers"},{"type":"paragraph","inlineContent":[{"text":"There is a common pattern in the Composable Architecture of representing destinations a feature can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"navigate to as a reducer that operates on enum state, with a case for each feature that can be"},{"text":" ","type":"text"},{"type":"text","text":"navigated to. This is explained in great detail in the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","isActive":true,"type":"reference"},{"text":" and","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation","isActive":true,"type":"reference"},{"type":"text","text":" articles."}]},{"inlineContent":[{"type":"text","text":"This form of domain modeling can be very powerful, but also incur a bit of boilerplate. For example,"},{"text":" ","type":"text"},{"type":"text","text":"if a feature can navigate to 3 other features, then one might have a "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer like the"},{"text":" ","type":"text"},{"text":"following:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Destination {","  @ObservableState","  enum State {","    case add(FormFeature.State)","    case detail(DetailFeature.State)","    case edit(EditFeature.State)","  }","  enum Action {","    case add(FormFeature.Action)","    case detail(DetailFeature.Action)","    case edit(EditFeature.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.add, action: \\.add) {","      FormFeature()","    }","    Scope(state: \\.detail, action: \\.detail) {","      DetailFeature()","    }","    Scope(state: \\.edit, action: \\.edit) {","      EditFeature()","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"It’s not the worst code in the world, but it is 24 lines with a lot of repetition, and if we need to"},{"type":"text","text":" "},{"text":"add a new destination we must add a case to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"reference","isActive":true},{"type":"text","text":" enum, a case to the"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","isActive":true,"type":"reference"},{"text":" enum, and a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","type":"reference","isActive":true},{"type":"text","text":" to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"text":" macro is now capable of generating all of this code for you from the following","type":"text"},{"type":"text","text":" "},{"type":"text","text":"simple declaration"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","enum Destination {","  case add(FormFeature)","  case detail(DetailFeature)","  case edit(EditFeature)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"24 lines of code has become 6. The "},{"code":"@Reducer","type":"codeVoice"},{"type":"text","text":" macro can now be applied to an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enum"}]},{"type":"text","text":" where each case"},{"type":"text","text":" "},{"text":"holds onto the reducer that governs the logic and behavior for that case. Further, when using the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:)"},{"type":"text","text":" operator with this style of "},{"code":"Destination","type":"codeVoice"},{"text":" enum reducer you can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"completely leave off the trailing closure as it can be automatically inferred:"}]},{"code":[" Reduce { state, action in","   \/\/ Core feature logic"," }"," .ifLet(\\.$destination, action: \\.destination)","-{","-  Destination()","-}"],"type":"codeListing","syntax":"diff"},{"inlineContent":[{"type":"text","text":"This pattern also works for "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducers, which is common when dealing with"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation","isActive":true},{"text":", and in that case you can leave off the trailing closure of the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","type":"reference","isActive":true},{"text":" operator:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["Reduce { state, action in","  \/\/ Core feature logic","}",".forEach(\\.path, action: \\.path)","-{","-  Path()","-}"],"syntax":"diff"},{"type":"paragraph","inlineContent":[{"text":"Further, for ","type":"text"},{"type":"codeVoice","code":"Path"},{"text":" reducers in particular, the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro also helps you reduce"},{"type":"text","text":" "},{"text":"boilerplate when using the initializer","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","isActive":true,"type":"reference"},{"type":"text","text":" that comes with the library."},{"type":"text","text":" "},{"text":"In the last trailing closure you can use the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case","isActive":true,"type":"reference"},{"text":" computed property to switch on the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" enum and extract out a store for each case:"}]},{"type":"codeListing","syntax":"swift","code":["NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","  \/\/ Root view","} destination: { store in","  switch store.case {","  case let .add(store):","    AddView(store: store)","  case let .detail(store):","    DetailView(store: store)","  case let .edit(store):","    EditView(store: store)","  }","}"]},{"anchor":"Navigating-to-non-reducer-features","text":"Navigating to non-reducer features","type":"heading","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are many times that you want to present or navigate to a feature that is not modeled with a"},{"type":"text","text":" "},{"text":"Composable Architecture reducer. This can happen with legacy features that are not built with the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture, or with features that are very simple and do not need a fully built"},{"type":"text","text":" "},{"type":"text","text":"reducer."}]},{"inlineContent":[{"type":"text","text":"In those cases you can use the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseIgnored()","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseEphemeral()","isActive":true,"type":"reference"},{"text":" macros to","type":"text"},{"text":" ","type":"text"},{"text":"annotate cases that are not powered by reducers. See the documentation for those macros for more","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"details."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, suppose that you have a feature that can navigate to multiple features, all of"},{"type":"text","text":" "},{"type":"text","text":"which are Composable Architecture features except for one:"}]},{"syntax":"swift","code":["@Reducer","enum Destination {","  case add(AddItemFeature)","  case edit(EditItemFeature)","  @ReducerCaseIgnored","  case item(Item)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this situation the "},{"type":"codeVoice","code":".item"},{"text":" case holds onto a plain item and not a full reducer, and for that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"reason we have to ignore it from some of "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":"’s macro expansion."}]},{"type":"paragraph","inlineContent":[{"text":"Then, to present a view from this case one can do:","type":"text"}]},{"code":[".sheet(item: $store.scope(state: \\.destination?.item, action: \\.destination.item)) { store in","  ItemView(item: store.withState { $0 })","}"],"type":"codeListing","syntax":"swift"},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)","isActive":true},{"type":"text","text":" is necessary because the value held inside the "},{"type":"codeVoice","code":".item"},{"type":"text","text":" case"},{"type":"text","text":" "},{"text":"does not have the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"reference","isActive":true},{"type":"text","text":" macro applied, nor should it. And so using "},{"code":"withState","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"is a way to get access to the state in the store without any observation taking place."}]}]},{"type":"heading","anchor":"Synthesizing-protocol-conformances-on-State-and-Action","level":4,"text":"Synthesizing protocol conformances on State and Action"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" and "},{"code":"Action","type":"codeVoice"},{"text":" types are generated automatically for you when using ","type":"text"},{"code":"@Reducer","type":"codeVoice"},{"text":" on an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"enum, you must extend these types yourself to synthesize conformances of "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":", "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"inlineContent":[{"text":"etc.","type":"text"}],"type":"emphasis"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","enum Destination {","  \/\/ ...","}","extension Destination.State: Equatable {}"]},{"name":"Note","content":[{"inlineContent":[{"text":"In Swift <6 the above extension causes a compiler error due to a bug in Swift.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To work around this compiler bug, the library provides a version of the "},{"code":"@Reducer","type":"codeVoice"},{"type":"text","text":" macro that"},{"type":"text","text":" "},{"text":"takes two ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance"},{"type":"text","text":" arguments, which allow you to"},{"text":" ","type":"text"},{"type":"text","text":"describe the protocols you want to attach to the "},{"type":"codeVoice","code":"State"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" types:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer(state: .equatable, .sendable, action: .sendable)","enum Destination {","  \/\/ ...","}"]}],"type":"aside","style":"note"},{"type":"heading","text":"Nested enum reducers","level":4,"anchor":"Nested-enum-reducers"},{"type":"paragraph","inlineContent":[{"text":"There may be times when an enum reducer may want to nest another enum reducer. To do so, the parent","type":"text"},{"type":"text","text":" "},{"text":"enum reducer must specify the child’s ","type":"text"},{"code":"Body","type":"codeVoice"},{"type":"text","text":" associated value and "},{"type":"codeVoice","code":"body"},{"text":" static property explicitly:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","enum Modal { \/* ... *\/ }","","@Reducer","enum Destination {","  case modal(Modal.Body = Modal.body)","}"]},{"text":"Gotchas","level":3,"type":"heading","anchor":"Gotchas"},{"type":"heading","text":"Autocomplete","level":4,"anchor":"Autocomplete"},{"inlineContent":[{"type":"text","text":"Applying "},{"code":"@Reducer","type":"codeVoice"},{"type":"text","text":" can break autocompletion in the "},{"code":"body","type":"codeVoice"},{"text":" of the reducer. This is a known","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/github.com\/apple\/swift\/issues\/69477","type":"reference"},{"type":"text","text":", and it can generally be worked around by"},{"type":"text","text":" "},{"type":"text","text":"providing additional type hints to the compiler:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Adding an explicit "},{"code":"Reducer","type":"codeVoice"},{"text":" conformance in addition to the macro application can restore","type":"text"},{"type":"text","text":" "},{"text":"autocomplete throughout the ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" of the reducer:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":[" @Reducer","-struct Feature {","+struct Feature: Reducer {"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adding explicit generics to instances of "},{"code":"Reduce","type":"codeVoice"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" can restore autocomplete"},{"text":" ","type":"text"},{"text":"inside the ","type":"text"},{"type":"codeVoice","code":"Reduce"},{"type":"text","text":":"}]},{"code":[" var body: some Reducer<State, Action> {","-  Reduce { state, action in","+  Reduce<State, Action> { state, action in"],"type":"codeListing","syntax":"diff"}]}]},{"anchor":"Preview-and-enum-reducers","type":"heading","text":"#Preview and enum reducers","level":4},{"inlineContent":[{"type":"text","text":"The "},{"code":"#Preview","type":"codeVoice"},{"type":"text","text":" macro is not capable of seeing the expansion of any macros since it is a macro"},{"type":"text","text":" "},{"type":"text","text":"itself. This means that when using destination and path reducers (see"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Destination-and-path-reducers","isActive":true},{"text":" above) you cannot construct the cases of the state","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"enum inside "},{"code":"#Preview","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(","        destination: .edit(EditFeature.State())  \/\/ 🛑","      )","    ) {","      Feature()","    }","  )","}"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":".edit"},{"type":"text","text":" case is not usable from within "},{"code":"#Preview","type":"codeVoice"},{"type":"text","text":" since it is generated by the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"macro."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The workaround is to move the view to a helper that be compiled outside of a macro, and then use it"},{"type":"text","text":" "},{"type":"text","text":"inside the macro:"}]},{"type":"codeListing","syntax":"swift","code":["#Preview {","  preview","}","private var preview: some View {","  FeatureView(","    store: Store(","      initialState: Feature.State(","        destination: .edit(EditFeature.State())","      )","    ) {","      Feature()","    }","  )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a computed property, free function, or even a dedicated view if you want. You can also"},{"text":" ","type":"text"},{"type":"text","text":"use the old, non-macro style of previews by using a "},{"type":"codeVoice","code":"PreviewProvider"},{"type":"text","text":":"}]},{"syntax":"swift","code":["struct Feature_Previews: PreviewProvider {","  static var previews: some  View {","    FeatureView(","      store: Store(","        initialState: Feature.State(","          destination: .edit(EditFeature.State())","        )","      ) {","        Feature()","      }","    )","  }","}"],"type":"codeListing"},{"type":"heading","text":"Error: External macro implementation … could not be found","level":4,"anchor":"Error-External-macro-implementation--could-not-be-found"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When integrating with the Composable Architecture, one may encounter the following error:"}]},{"type":"aside","name":"Error","content":[{"inlineContent":[{"text":"External macro implementation type ‘ComposableArchitectureMacros.ReducerMacro’ could not be","type":"text"},{"type":"text","text":" "},{"text":"found for macro ‘Reducer()’","type":"text"}],"type":"paragraph"}],"style":"note"},{"type":"paragraph","inlineContent":[{"text":"This error can show up when the macro has not yet been enabled, which is a separate error that","type":"text"},{"text":" ","type":"text"},{"text":"should be visible from Xcode’s Issue navigator.","type":"text"}]},{"inlineContent":[{"text":"Sometimes, however, this error will still emit due to an Xcode bug in which a custom build","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"configuration name is being used in the project. In general, using a build configuration other than"},{"type":"text","text":" "},{"type":"text","text":"“Debug” or “Release” can trigger upstream build issues with Swift packages, and we recommend only"},{"type":"text","text":" "},{"text":"using the default “Debug” and “Release” build configuration names to avoid the above issue and","type":"text"},{"type":"text","text":" "},{"text":"others.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"CI build failures","level":4,"anchor":"CI-build-failures"},{"inlineContent":[{"type":"text","text":"When testing your code on an external CI server you may run into errors such as the following:"}],"type":"paragraph"},{"name":"Error","content":[{"inlineContent":[{"type":"text","text":"CasePathsMacros Target ‘CasePathsMacros’ must be enabled before it can be used."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"ComposableArchitectureMacros Target ‘ComposableArchitectureMacros’ must be enabled before it can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"be used."}]}],"style":"note","type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can fix this in one of two ways. You can write a default to the CI machine that allows Xcode to"},{"text":" ","type":"text"},{"text":"skip macro validation:","type":"text"}]},{"type":"codeListing","code":["defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES"],"syntax":"shell"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or if you are invoking "},{"type":"codeVoice","code":"xcodebuild"},{"text":" directly in your CI scripts, you can pass the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"-skipMacroValidation"},{"type":"text","text":" flag to "},{"type":"codeVoice","code":"xcodebuild"},{"type":"text","text":" when building your project:"}]},{"type":"codeListing","syntax":"shell","code":["xcodebuild -skipMacroValidation …"]}],"kind":"content"}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"],"generated":true,"anchor":"State-management","title":"State management"}],"sections":[],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"externalID":"s:22ComposableArchitecture7ReducerP","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"title":"Reducer","symbolKind":"protocol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"roleHeading":"Protocol"},"relationshipsSections":[{"type":"inheritedBy","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducer"],"kind":"relationships","title":"Inherited By"},{"title":"Conforming Types","type":"conformingTypes","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Optional","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"],"kind":"relationships"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/reducer"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"topicSections":[{"title":"Implementing a reducer","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"],"anchor":"Implementing-a-reducer"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers"],"anchor":"Composing-reducers","title":"Composing reducers"},{"anchor":"Embedding-child-features","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:filePath:line:column:)-2r2pn","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifCaseLet(_:action:then:fileID:filePath:line:column:)-7sg8d","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"],"title":"Embedding child features"},{"title":"Sharing state","anchor":"Sharing-state","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Optional"],"title":"Supporting reducers","anchor":"Supporting-reducers"},{"title":"Reducer modifiers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/transformDependency(_:transform:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/signpost(_:log:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/_printChanges(_:)"],"anchor":"Reducer-modifiers"},{"anchor":"Supporting-types","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerOf"],"title":"Supporting types"},{"title":"Deprecations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerDeprecations"],"anchor":"Deprecations"},{"generated":true,"title":"Instance Methods","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-o1gn","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:fileID:filePath:line:column:)-9blhe"],"anchor":"Instance-Methods"}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":"s should be executed later by the store, if any.","type":"text"}],"references":{"#Preview-and-enum-reducers":{"title":"#Preview and enum reducers","titleInlineContent":[{"type":"text","text":"#Preview and enum reducers"}],"type":"link","identifier":"#Preview-and-enum-reducers","url":"#Preview-and-enum-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/case":{"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"CaseReducerState","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"State.StateReducer.Action"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"text":"A destructurable view of a store on a collection of cases.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"`case`"},{"kind":"text","text":": "},{"text":"State","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture16CaseReducerStateP0eD0Qa","text":"StateReducer","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CaseScope","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11CaseReducerP0C5ScopeQa"}],"kind":"symbol","title":"case","url":"\/documentation\/composablearchitecture\/store\/case","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackBasedNavigation":{"url":"\/documentation\/composablearchitecture\/stackbasednavigation","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation","title":"Stack-based navigation","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn about stack-based navigation, that is navigation modeled with collections, including how to"},{"text":" ","type":"text"},{"text":"model your domains, how to integrate features, how to test your features, and more.","type":"text"}]},"#Destination-and-path-reducers":{"title":"Destination and path reducers","titleInlineContent":[{"type":"text","text":"Destination and path reducers"}],"type":"link","identifier":"#Destination-and-path-reducers","url":"#Destination-and-path-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"title":"State","required":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"topic","abstract":[{"text":"A type that holds the current state of the reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/reducer\/state","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"State","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"kind":"symbol","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"url":"\/documentation\/composablearchitecture\/reducer()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"topic","role":"symbol","title":"Reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"title":"Shared","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","url":"\/documentation\/composablearchitecture\/shared","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Shared","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Shared"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerCaseIgnored()":{"type":"topic","kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ReducerCaseIgnored"},{"text":"()","kind":"text"}],"abstract":[{"text":"Marks the case of an enum reducer as “ignored”, and as such will not compose the case’s domain","type":"text"},{"type":"text","text":" "},{"type":"text","text":"into the rest of the reducer besides state."}],"title":"ReducerCaseIgnored()","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseIgnored()","role":"symbol","url":"\/documentation\/composablearchitecture\/reducercaseignored()"},"http://github.com/pointfreeco/swift-case-paths":{"title":"Case paths","titleInlineContent":[{"type":"text","text":"Case paths"}],"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","url":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:fileID:filePath:line:column:)":{"url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:fileid:filepath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Root","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}]},"kind":"symbol","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Action"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Destination"},{"text":", ","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"path","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Binding","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","text":"StackState"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","text":"StackAction"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">>>, ","kind":"text"},{"text":"root","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"destination","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Destination"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Drives a navigation stack with a store.","type":"text"}],"title":"init(path:root:destination:fileID:filePath:line:column:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:fileID:filePath:line:column:)-9blhe":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:fileID:filePath:line:column:)-9blhe","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationState"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths03AnyA4PathV","text":"AnyCasePath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"text":"PresentationAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"text":"<","kind":"text"},{"text":"DestinationAction","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"text":">\n","kind":"text"}],"title":"ifLet(_:action:fileID:filePath:line:column:)","kind":"symbol","role":"symbol","abstract":[],"deprecated":true,"url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:fileid:filepath:line:column:)-9blhe"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:_:)","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:_:)","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","kind":"typeIdentifier","text":"DependencyValues"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"title":"dependency(_:_:)","abstract":[{"text":"Sets the dependency value of the specified key path to the given value.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"abstract":[{"text":"Learn techniques for sharing state throughout many parts of your application, and how to persist","type":"text"},{"type":"text","text":" "},{"text":"data to user defaults, the file system, and other external mediums.","type":"text"}],"title":"Sharing state","type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/sharingstate","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"url":"\/documentation\/composablearchitecture\/effect","type":"topic","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/onChange(of:_:)":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)","title":"onChange(of:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"onChange","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"V"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"text":"of","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"text":", (","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") -> "},{"text":"_OnChangeReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":">","kind":"text"}],"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Adds a reducer to run when this reducer changes the given value in state."}],"url":"\/documentation\/composablearchitecture\/reducer\/onchange(of:_:)"},"https://developer.apple.com/documentation/os/logging/recording_performance_data":{"title":"signposts","titleInlineContent":[{"type":"text","text":"signposts"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/os\/logging\/recording_performance_data","url":"https:\/\/developer.apple.com\/documentation\/os\/logging\/recording_performance_data"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb":{"abstract":[{"text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent state."}],"role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:filepath:line:column:)-9svqb","title":"forEach(_:action:destination:fileID:filePath:line:column:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"forEach"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"DestinationState"},{"text":", ","kind":"text"},{"text":"DestinationAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Destination","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"kind":"text","text":", "},{"text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":", ","kind":"text"},{"text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"text":"destination","kind":"externalParam"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":">\n","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerDeprecations":{"title":"Deprecations","type":"topic","url":"\/documentation\/composablearchitecture\/reducerdeprecations","abstract":[{"type":"text","text":"Review unsupported reducer APIs and their replacements."}],"role":"collectionGroup","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerDeprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"role":"symbol","abstract":[{"text":"Places a value in the reducer’s dependencies.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"kind":"symbol","title":"dependency(_:)","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"navigatorTitle":[{"text":"Store","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/store","title":"Store","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/transformDependency(_:transform:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/transformDependency(_:transform:)","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/transformdependency(_:transform:)","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"transformDependency"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"text":"DependencyValues","kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"text":">, ","kind":"text"},{"text":"transform","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"transformDependency(_:transform:)","abstract":[{"text":"Transform a reducer’s dependency value at the specified key path with the given function.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_SynthesizedConformance":{"title":"_SynthesizedConformance","type":"topic","url":"\/documentation\/composablearchitecture\/_synthesizedconformance","abstract":[{"type":"text","text":"A description of a protocol conformance to synthesize on the State and Action types generated by"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":" macro.","type":"text"}],"role":"symbol","deprecated":true,"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"_SynthesizedConformance","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"_SynthesizedConformance"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-20w8t":{"abstract":[{"text":"The content and behavior of a reducer that is composed from other reducers.","type":"text"}],"required":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","role":"symbol","type":"topic","kind":"symbol","title":"body","url":"\/documentation\/composablearchitecture\/reducer\/body-20w8t","defaultImplementations":2,"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP4BodyQa","text":"Body"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/signpost(_:log:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"signpost","kind":"identifier"},{"kind":"text","text":"("},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"log"},{"text":": ","kind":"text"},{"text":"OSLog","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)OS_os_log"},{"kind":"text","text":") -> "},{"text":"_SignpostReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/signpost(_:log:)","url":"\/documentation\/composablearchitecture\/reducer\/signpost(_:log:)","type":"topic","abstract":[{"text":"Instruments a reducer with","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/os\/logging\/recording_performance_data","isActive":true},{"type":"text","text":"."}],"title":"signpost(_:log:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","url":"\/documentation\/composablearchitecture\/reducer","type":"topic","title":"Reducer","kind":"symbol"},"#CasePathable-and-dynamicMemberLookup-enums":{"title":"@CasePathable and @dynamicMemberLookup enums","titleInlineContent":[{"type":"text","text":"@CasePathable and @dynamicMemberLookup enums"}],"type":"link","identifier":"#CasePathable-and-dynamicMemberLookup-enums","url":"#CasePathable-and-dynamicMemberLookup-enums"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EmptyReducer":{"url":"\/documentation\/composablearchitecture\/emptyreducer","role":"symbol","type":"topic","title":"EmptyReducer","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmptyReducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","navigatorTitle":[{"text":"EmptyReducer","kind":"identifier"}],"abstract":[{"text":"A reducer that does nothing.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"none"},{"text":": ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"none","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","abstract":[{"text":"An effect that does nothing and completes immediately. Useful for situations where you must","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"return an effect, but you don’t need to do anything."}],"type":"topic","url":"\/documentation\/composablearchitecture\/effect\/none"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q":{"url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:filepath:line:column:)-4ub6q","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","abstract":[{"text":"Embeds a child reducer in a parent domain that works on an optional property of parent state.","type":"text"}],"title":"ifLet(_:action:destination:fileID:filePath:line:column:)","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ifLet","kind":"identifier"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"text":", ","kind":"text"},{"text":"Destination","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"destination"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">\n"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation":{"role":"article","title":"Tree-based navigation","abstract":[{"type":"text","text":"Learn about tree-based navigation, that is navigation modeled with optionals and enums, including"},{"type":"text","text":" "},{"text":"how to model your domains, how to integrate features, how to test your features, and more.","type":"text"}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","type":"topic","url":"\/documentation\/composablearchitecture\/treebasednavigation"},"#Automatic-fulfillment-of-reducer-requirements":{"title":"Automatic fulfillment of reducer requirements","titleInlineContent":[{"type":"text","text":"Automatic fulfillment of reducer requirements"}],"type":"link","identifier":"#Automatic-fulfillment-of-reducer-requirements","url":"#Automatic-fulfillment-of-reducer-requirements"},"#CI-build-failures":{"title":"CI build failures","titleInlineContent":[{"type":"text","text":"CI build failures"}],"type":"link","identifier":"#CI-build-failures","url":"#CI-build-failures"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Swift/Optional":{"fragments":[{"text":"extension","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:Sq","text":"Optional","kind":"identifier"}],"type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Reducer"},{"text":".","type":"text"}]},"url":"\/documentation\/composablearchitecture\/swift\/optional","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"Optional","kind":"identifier"}],"title":"Optional","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Optional","role":"symbol"},"#Synthesizing-protocol-conformances-on-State-and-Action":{"title":"Synthesizing protocol conformances on State and Action","titleInlineContent":[{"type":"text","text":"Synthesizing protocol conformances on State and Action"}],"type":"link","identifier":"#Synthesizing-protocol-conformances-on-State-and-Action","url":"#Synthesizing-protocol-conformances-on-State-and-Action"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"url":"\/documentation\/composablearchitecture\/observablestate()","role":"symbol","kind":"symbol","title":"ObservableState()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","kind":"article","url":"\/documentation\/composablearchitecture\/dependencymanagement","title":"Dependencies","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"text":" ","type":"text"},{"text":"any reducer.","type":"text"}],"role":"article"},"#Nested-enum-reducers":{"title":"Nested enum reducers","titleInlineContent":[{"type":"text","text":"Nested enum reducers"}],"type":"link","identifier":"#Nested-enum-reducers","url":"#Nested-enum-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"url":"\/documentation\/composablearchitecture\/navigation","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"title":"Navigation","kind":"article","type":"topic","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CombineReducers","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/combinereducers","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","title":"CombineReducers","navigatorTitle":[{"kind":"identifier","text":"CombineReducers"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Combines multiple reducers into a single reducer.","type":"text"}]},"https://swiftpackageindex.com/pointfreeco/swift-case-paths/main/documentation/casepaths/casepathable()":{"title":"@CasePathable","titleInlineContent":[{"type":"codeVoice","code":"@CasePathable"}],"type":"link","identifier":"https:\/\/swiftpackageindex.com\/pointfreeco\/swift-case-paths\/main\/documentation\/casepaths\/casepathable()","url":"https:\/\/swiftpackageindex.com\/pointfreeco\/swift-case-paths\/main\/documentation\/casepaths\/casepathable()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:element:fileID:filePath:line:column:)-o1gn":{"abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"forEach"},{"text":"<","kind":"text"},{"text":"ElementState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ElementAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ID"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Element"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"IdentifiedArray","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"text":", ","kind":"text"},{"text":"ElementState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyCasePath","preciseIdentifier":"s:9CasePaths03AnyA4PathV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"text":", (","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ElementAction"},{"kind":"text","text":")>, "},{"kind":"externalParam","text":"element"},{"kind":"text","text":": () -> "},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier","text":"Action"},{"text":">\n","kind":"text"}],"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:element:fileid:filepath:line:column:)-o1gn","type":"topic","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-o1gn","role":"symbol","title":"forEach(_:action:element:fileID:filePath:line:column:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifCaseLet(_:action:then:fileID:filePath:line:column:)-7sg8d":{"url":"\/documentation\/composablearchitecture\/reducer\/ifcaselet(_:action:then:fileid:filepath:line:column:)-7sg8d","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifCaseLet(_:action:then:fileID:filePath:line:column:)-7sg8d","type":"topic","title":"ifCaseLet(_:action:then:fileID:filePath:line:column:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifCaseLet","kind":"identifier"},{"kind":"text","text":"<"},{"text":"CaseState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"CaseAction"},{"text":", ","kind":"text"},{"text":"Case","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"CaseState"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"text":"CaseAction","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"then"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Case"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"text":"_IfCaseLetReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Case","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on a case of parent enum state."}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"#Autocomplete":{"title":"Autocomplete","titleInlineContent":[{"type":"text","text":"Autocomplete"}],"type":"link","identifier":"#Autocomplete","url":"#Autocomplete"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/_printChanges(_:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"_printChanges","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"_ReducerPrinter"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":">?) -> ","kind":"text"},{"kind":"typeIdentifier","text":"_PrintChangesReducer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/_printChanges(_:)","url":"\/documentation\/composablearchitecture\/reducer\/_printchanges(_:)","type":"topic","abstract":[{"text":"Enhances a reducer with debug logging of received actions and state mutations for the given","type":"text"},{"text":" ","type":"text"},{"text":"printer.","type":"text"}],"title":"_printChanges(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/withState(_:)":{"abstract":[{"text":"Calls the given closure with a snapshot of the current state of the store.","type":"text"}],"title":"withState(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)","url":"\/documentation\/composablearchitecture\/store\/withstate(_:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withState","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerOf":{"abstract":[{"type":"text","text":"A convenience for constraining a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" conformance.","type":"text"}],"title":"ReducerOf","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerOf","url":"\/documentation\/composablearchitecture\/reducerof","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"ReducerOf","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerOf"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceKey":{"url":"\/documentation\/composablearchitecture\/persistencekey","navigatorTitle":[{"kind":"identifier","text":"PersistenceKey"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PersistenceKey","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey","type":"topic","title":"PersistenceKey","kind":"symbol","abstract":[{"type":"text","text":"A type that can persist shared state to an external storage."}]},"#Gotchas":{"title":"Gotchas","titleInlineContent":[{"type":"text","text":"Gotchas"}],"type":"link","identifier":"#Gotchas","url":"#Gotchas"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer#Destination-and-path-reducers":{"url":"\/documentation\/composablearchitecture\/reducer#Destination-and-path-reducers","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Destination-and-path-reducers","abstract":[],"type":"topic","kind":"section","title":"Destination and path reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce":{"url":"\/documentation\/composablearchitecture\/reduce","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","navigatorTitle":[{"text":"Reduce","kind":"identifier"}],"type":"topic","title":"Reduce","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reduce"}],"abstract":[{"text":"A type-erased reducer that invokes the given ","type":"text"},{"code":"reduce","type":"codeVoice"},{"type":"text","text":" function."}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"abstract":[{"text":"A reducer that updates bindable state when it receives binding actions.","type":"text"}],"title":"BindingReducer","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","url":"\/documentation\/composablearchitecture\/bindingreducer","navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}],"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingReducer","kind":"identifier"}]},"https://github.com/apple/swift/issues/69477":{"title":"issue","titleInlineContent":[{"type":"text","text":"issue"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift\/issues\/69477","url":"https:\/\/github.com\/apple\/swift\/issues\/69477"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseReducer":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/casereducer","abstract":[{"type":"text","text":"A reducer represented by multiple enum cases."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CaseReducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducer","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CaseReducer"}],"title":"CaseReducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:)":{"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"DestinationState"},{"text":", ","kind":"text"},{"text":"DestinationAction","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","text":"StackAction"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"DestinationAction","kind":"typeIdentifier"},{"kind":"text","text":">>) -> "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"text":">\n","kind":"text"}],"abstract":[{"type":"text","text":"A special overload of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb","isActive":true,"type":"reference"},{"text":" for enum","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"reducers."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","title":"forEach(_:action:)"},"#Using-the-Reducer-macro":{"title":"Using the @Reducer macro","titleInlineContent":[{"type":"text","text":"Using the @Reducer macro"}],"type":"link","identifier":"#Using-the-Reducer-macro","url":"#Using-the-Reducer-macro"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerBuilder":{"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","navigatorTitle":[{"text":"ReducerBuilder","kind":"identifier"}],"kind":"symbol","title":"ReducerBuilder","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerBuilder"}],"url":"\/documentation\/composablearchitecture\/reducerbuilder","abstract":[{"type":"text","text":"A result builder for combining reducers into a single reducer by running each, one after the"},{"type":"text","text":" "},{"type":"text","text":"other, and merging their effects."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:)":{"abstract":[{"type":"text","text":"A special overload of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","isActive":true},{"type":"text","text":" for enum"},{"type":"text","text":" "},{"text":"reducers.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO","text":"PresentationAction"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">>) -> "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":">\n","kind":"text"}],"url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:)","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:)","role":"symbol","title":"ifLet(_:action:)","kind":"symbol"},"#Navigating-to-non-reducer-features":{"title":"Navigating to non-reducer features","titleInlineContent":[{"type":"text","text":"Navigating to non-reducer features"}],"type":"link","identifier":"#Navigating-to-non-reducer-features","url":"#Navigating-to-non-reducer-features"},"#Conforming-to-the-Reducer-protocol":{"title":"Conforming to the Reducer protocol","titleInlineContent":[{"type":"text","text":"Conforming to the Reducer protocol"}],"type":"link","identifier":"#Conforming-to-the-Reducer-protocol","url":"#Conforming-to-the-Reducer-protocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:then:fileID:filePath:line:column:)-2r2pn":{"url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:then:fileid:filepath:line:column:)-2r2pn","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:filePath:line:column:)-2r2pn","type":"topic","title":"ifLet(_:action:then:fileID:filePath:line:column:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"text":"WrappedState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"WrappedAction","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Wrapped"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"WrappedState"},{"kind":"text","text":"?>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"WrappedAction"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"then"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"text":">\n","kind":"text"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerCaseEphemeral()":{"role":"symbol","title":"ReducerCaseEphemeral()","kind":"symbol","abstract":[{"text":"Marks the case of an enum reducer as holding onto “ephemeral” state.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseEphemeral()","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerCaseEphemeral"},{"text":"()","kind":"text"}],"url":"\/documentation\/composablearchitecture\/reducercaseephemeral()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:element:fileID:filePath:line:column:)-6zye8":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ElementState"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ElementAction"},{"text":", ","kind":"text"},{"text":"ID","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"kind":"text","text":", "},{"text":"IdentifiedArray","kind":"typeIdentifier","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ID"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ElementState"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","text":"IdentifiedAction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ElementAction"},{"kind":"text","text":">>, "},{"text":"element","kind":"externalParam"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Element"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"kind":"text","text":">\n"}],"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:element:fileid:filepath:line:column:)-6zye8","kind":"symbol","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a collection in parent"},{"type":"text","text":" "},{"type":"text","text":"state."}],"title":"forEach(_:action:element:fileID:filePath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/Action":{"title":"Action","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"text":"Action","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducer\/action","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","abstract":[{"text":"A type that holds all possible actions that cause the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"type":"text","text":" of the reducer to change"},{"text":" ","type":"text"},{"type":"text","text":"and\/or kick off a side "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":" that can communicate with the outside world."}],"required":true,"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"title":"Scope","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","type":"topic","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain."}],"url":"\/documentation\/composablearchitecture\/scope","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"navigatorTitle":[{"text":"Scope","kind":"identifier"}]}}}