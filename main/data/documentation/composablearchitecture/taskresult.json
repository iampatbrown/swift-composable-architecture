{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Success"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"}]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type is needed because Swiftâ€™s concurrency tools can only express untyped errors, such as"},{"text":" ","type":"text"},{"type":"codeVoice","code":"async"},{"text":" functions and ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"text":", and so their output can realistically only be bridged to","type":"text"},{"text":" ","type":"text"},{"code":"Result<_, any Error>","type":"codeVoice"},{"text":". However, ","type":"text"},{"type":"codeVoice","code":"Result<_, any Error>"},{"type":"text","text":" is never "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" since "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" is not"},{"type":"text","text":" "},{"code":"Equatable","type":"codeVoice"},{"text":", and equatability is very important for testing in the Composable Architecture. By","type":"text"},{"type":"text","text":" "},{"text":"defining our own type we get the ability to recover equatability in most situations.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If someday Swift gets typed "},{"type":"codeVoice","code":"throws"},{"text":", then we can eliminate this type and rely solely on","type":"text"},{"type":"text","text":" "},{"code":"Result","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You typically use this type as the payload of an action which receives a response from an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"effect:"}]},{"syntax":"swift","type":"codeListing","code":["enum Action: Equatable {","  case factButtonTapped","  case factResponse(TaskResult<String>)","}"]},{"inlineContent":[{"type":"text","text":"Then you can model your dependency as using simple "},{"code":"async","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"throws","type":"codeVoice"},{"type":"text","text":" functionality:"}],"type":"paragraph"},{"syntax":"swift","code":["struct NumberFactClient {","  var fetch: (Int) async throws -> String","}"],"type":"codeListing"},{"inlineContent":[{"text":"And finally you can use ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"type":"text","text":" to construct an"},{"text":" ","type":"text"},{"text":"effect in the reducer that invokes the ","type":"text"},{"type":"codeVoice","code":"numberFact"},{"text":" endpoint and wraps its response in a","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference","isActive":true},{"type":"text","text":" by using its catching initializer, "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","type":"reference","isActive":true},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["case .factButtonTapped:","  return .run { send in","    await send(","      .factResponse(","        TaskResult { try await self.numberFact.fetch(state.number) }","      )","    )","  }","","case let .factResponse(.success(fact)):","  \/\/ do something with fact","","case .factResponse(.failure):","  \/\/ handle error","","\/\/ ...","}"],"type":"codeListing"},{"level":2,"text":"Equality","type":"heading","anchor":"Equality"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The biggest downside to using an untyped "},{"code":"Error","type":"codeVoice"},{"type":"text","text":" in a result type is that the result will not"},{"text":" ","type":"text"},{"type":"text","text":"be equatable even if the success type is. This negatively affects your ability to test features"},{"type":"text","text":" "},{"text":"that use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" in their actions with the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference","isActive":true},{"type":"text","text":" does extra work to try to maintain equatability when possible. If the underlying"},{"text":" ","type":"text"},{"type":"text","text":"type masked by the "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" is "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":", then it will use that "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" conformance"},{"type":"text","text":" "},{"type":"text","text":"on two failures. Luckily, most errors thrown by Appleâ€™s frameworks are already equatable, and"},{"type":"text","text":" "},{"type":"text","text":"because errors are typically simple value types, it is usually possible to have the compiler"},{"type":"text","text":" "},{"text":"synthesize a conformance for you.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are testing the unhappy path of a feature that feeds a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"text":" back into the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"system, be sure to conform the error to equatable, or the test will fail:"}]},{"type":"codeListing","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error {}","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ ðŸ›‘","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}","\/\/ ðŸ›‘ 'RefreshFailure' is not equatable"],"syntax":"swift"},{"inlineContent":[{"text":"To get a passing test, explicitly conform your custom error to the ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol:"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error, Equatable {} \/\/ ðŸ‘ˆ","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ âœ…","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}"],"syntax":"swift"}]}],"topicSections":[{"anchor":"Representing-a-task-result","title":"Representing a task result","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)"]},{"anchor":"Converting-a-throwing-expression","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)"],"title":"Converting a throwing expression"},{"title":"Accessing a resultâ€™s value","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value"],"anchor":"Accessing-a-results-value"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)"],"title":"Transforming results","anchor":"Transforming-results"},{"title":"Default Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations"],"anchor":"Default-Implementations","generated":true}],"abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swiftâ€™s "},{"type":"codeVoice","code":"Result"},{"text":" ","type":"text"},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"type":"text","text":" "},{"text":"untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use 'Result', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.4#Moving-off-of-TaskResult"}]}],"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","interfaceLanguage":"swift"},"metadata":{"role":"symbol","symbolKind":"enum","externalID":"s:22ComposableArchitecture10TaskResultO","modules":[{"name":"ComposableArchitecture"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"roleHeading":"Enumeration","title":"TaskResult","navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"platforms":[]},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"title":"Creating an effect","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf"],"anchor":"Creating-an-effect","generated":true}],"variants":[{"paths":["\/documentation\/composablearchitecture\/taskresult"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"]]},"references":{"doc://ComposableArchitecture/s8SendableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Equatable-Implementations":{"abstract":[],"title":"Equatable Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","url":"\/documentation\/composablearchitecture\/taskresult\/equatable-implementations","role":"collectionGroup","kind":"article","type":"topic"},"doc://ComposableArchitecture/9CasePaths0A8PathableP":{"identifier":"doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP","type":"unresolvable","title":"CasePaths.CasePathable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/CasePathable-Implementations":{"url":"\/documentation\/composablearchitecture\/taskresult\/casepathable-implementations","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","role":"collectionGroup","title":"CasePathable Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/map(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","role":"symbol","deprecated":true,"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"text":"NewSuccess","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Success"},{"text":") -> ","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","text":"TaskResult"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewSuccess"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/taskresult\/map(_:)","type":"topic","title":"map(_:)","kind":"symbol","abstract":[{"type":"text","text":"Returns a new task result, mapping any success value using the given transformation."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"kind":"symbol","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","url":"\/documentation\/composablearchitecture\/taskresult","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"}],"title":"TaskResult","abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swiftâ€™s ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"type":"text","text":" "},{"type":"text","text":"untyped "},{"code":"Error","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/flatMap(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMap"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Success"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","text":"TaskResult"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewSuccess"},{"text":">) -> ","kind":"text"},{"text":"TaskResult","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","kind":"symbol","role":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/taskresult\/flatmap(_:)","title":"flatMap(_:)","abstract":[{"type":"text","text":"Returns a new task result, mapping any success value using the given transformation and"},{"text":" ","type":"text"},{"text":"unwrapping the produced result.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/send(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"send(_:)","abstract":[{"type":"text","text":"Initializes an effect that immediately emits the action passed in."}],"url":"\/documentation\/composablearchitecture\/effect\/send(_:)","kind":"symbol","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Swift/Result/init(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"TaskResult","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":">)"}],"url":"\/documentation\/composablearchitecture\/swift\/result\/init(_:)","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Success","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"any Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"init(_:)","kind":"symbol","abstract":[{"text":"Transforms a ","type":"text"},{"type":"codeVoice","code":"TaskResult"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"Result"},{"text":".","type":"text"}]},"doc://ComposableArchitecture/s8CopyableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","title":"Swift.Copyable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","role":"symbol","deprecated":true,"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Failure"},{"kind":"text","text":">("},{"text":"Result","preciseIdentifier":"s:s6ResultO","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">)"}],"url":"\/documentation\/composablearchitecture\/taskresult\/init(_:)","type":"topic","title":"init(_:)","kind":"symbol","abstract":[{"text":"Transforms a ","type":"text"},{"type":"codeVoice","code":"Result"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"TaskResult"},{"text":", erasing its ","type":"text"},{"type":"codeVoice","code":"Failure"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/failure(_:)":{"deprecated":true,"abstract":[{"text":"A failure, storing an error.","type":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/taskresult\/failure(_:)","title":"TaskResult.failure(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"failure"},{"kind":"text","text":"(any "},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Hashable-Implementations":{"url":"\/documentation\/composablearchitecture\/taskresult\/hashable-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations","abstract":[],"title":"Hashable Implementations","role":"collectionGroup","type":"topic","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"type":"topic","title":"TestStore","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","url":"\/documentation\/composablearchitecture\/reducer","type":"topic","title":"Reducer","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","role":"symbol","title":"run(priority:operation:catch:fileID:filePath:line:column:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"catch"},{"text":": ((any ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","type":"topic"},"doc://ComposableArchitecture/SQ":{"identifier":"doc:\/\/ComposableArchitecture\/SQ","type":"unresolvable","title":"Swift.Equatable"},"doc://ComposableArchitecture/SH":{"identifier":"doc:\/\/ComposableArchitecture\/SH","type":"unresolvable","title":"Swift.Hashable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/success(_:)":{"kind":"symbol","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","url":"\/documentation\/composablearchitecture\/taskresult\/success(_:)","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"success"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":")"}],"title":"TaskResult.success(_:)","abstract":[{"type":"text","text":"A success, storing a "},{"type":"codeVoice","code":"Success"},{"text":" value.","type":"text"}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"url":"\/documentation\/composablearchitecture\/effect","type":"topic","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/value":{"url":"\/documentation\/composablearchitecture\/taskresult\/value","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value","abstract":[{"text":"Returns the success value as a throwing property.","type":"text"}],"type":"topic","kind":"symbol","title":"value","deprecated":true,"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"value","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Success","kind":"typeIdentifier"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(catching:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"catching","kind":"externalParam"},{"text":": () ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Success"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"title":"init(catching:)","type":"topic","abstract":[{"type":"text","text":"Creates a new task result by evaluating an async throwing closure, capturing the returned"},{"type":"text","text":" "},{"text":"value as a success, or any thrown error as a failure.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","url":"\/documentation\/composablearchitecture\/taskresult\/init(catching:)","role":"symbol","deprecated":true,"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectOf":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf","kind":"symbol","url":"\/documentation\/composablearchitecture\/effectof","title":"EffectOf","abstract":[{"type":"text","text":"A convenience type alias for referring to an effect of a given reducerâ€™s domain."}],"role":"symbol","navigatorTitle":[{"text":"EffectOf","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EffectOf"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"none"},{"text":": ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"none","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","abstract":[{"text":"An effect that does nothing and completes immediately. Useful for situations where you must","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"return an effect, but you donâ€™t need to do anything."}],"type":"topic","url":"\/documentation\/composablearchitecture\/effect\/none"}}}