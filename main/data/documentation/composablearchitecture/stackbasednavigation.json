{"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","abstract":[{"type":"text","text":"Learn about stack-based navigation, that is navigation modeled with collections, including how to"},{"type":"text","text":" "},{"text":"model your domains, how to integrate features, how to test your features, and more.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation"},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackElementID","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb"],"generated":true,"title":"Stack-based navigation","anchor":"Stack-based-navigation"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/stackbasednavigation"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"metadata":{"title":"Stack-based navigation","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Article","role":"article"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Stack-based navigation is the process of modeling navigation using collections of state. This style","type":"text"},{"type":"text","text":" "},{"text":"of navigation allows you to deep-link into any state of your application by simply constructing a","type":"text"},{"text":" ","type":"text"},{"text":"flat collection of data, handing it off to SwiftUI, and letting it take care of the rest.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It also allows for complex and recursive navigation paths in your application."}]},{"items":[{"content":[{"inlineContent":[{"isActive":true,"identifier":"#Basics","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"#Pushing-features-onto-the-stack","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Integration","isActive":true}]}]},{"content":[{"inlineContent":[{"identifier":"#Dismissal","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"#Testing","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"#StackState-vs-NavigationPath","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#UIKit"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"Basics","anchor":"Basics"},{"type":"paragraph","inlineContent":[{"text":"The tools for this style of navigation include ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference","isActive":true},{"type":"text","text":" and the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb","isActive":true},{"type":"text","text":" operator, as well as a new"},{"text":" ","type":"text"},{"text":"initializer ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","isActive":true},{"type":"text","text":" on"},{"type":"text","text":" "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" that behaves like the normal initializer, but is tuned specifically for"},{"type":"text","text":" "},{"text":"the Composable Architecture.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The process of integrating features into a navigation stack largely consists of 2 steps:"},{"text":" ","type":"text"},{"text":"integrating the features’ domains together, and constructing a ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" for a"},{"text":" ","type":"text"},{"text":"store describing all the views in the stack. One typically starts by integrating the features’","type":"text"},{"text":" ","type":"text"},{"text":"domains together. This consists of defining a new reducer, typically called ","type":"text"},{"type":"codeVoice","code":"Path"},{"type":"text","text":", that holds the"},{"text":" ","type":"text"},{"type":"text","text":"domains of all the features that can be pushed onto the stack:"}]},{"type":"codeListing","code":["@Reducer","struct RootFeature {","  \/\/ ...","","  @Reducer","  enum Path {","    case addItem(AddFeature)","    case detailItem(DetailFeature)","    case editItem(EditFeature)","  }","}"],"syntax":"swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Path","type":"codeVoice"},{"text":" reducer is identical to the ","type":"text"},{"code":"Destination","type":"codeVoice"},{"text":" reducer that one creates for","type":"text"},{"type":"text","text":" "},{"text":"tree-based navigation when using enums. See ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","isActive":true,"type":"reference"},{"text":" for more","type":"text"},{"type":"text","text":" "},{"type":"text","text":"information."}]}],"type":"aside","name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer is defined we can then hold onto "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true,"type":"reference"},{"text":" in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"feature that manages the navigation stack:"}]},{"code":["@Reducer","struct RootFeature {","  @ObservableState","  struct State {","    var path = StackState<Path.State>()","    \/\/ ...","  }","  enum Action {","    case path(StackActionOf<Path>)","    \/\/ ...","  }","}"],"type":"codeListing","syntax":"swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference"},{"type":"text","text":" is generic over both state and action of the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" domain, and so you can"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","isActive":true,"type":"reference"},{"type":"text","text":" typealias to simplify the syntax a bit. This is different from"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"type":"text","text":", which only has a single generic of "},{"type":"codeVoice","code":"Action"},{"type":"text","text":"."}]}],"name":"Tip","type":"aside","style":"tip"},{"inlineContent":[{"type":"text","text":"And then we must make use of the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","type":"reference"},{"text":" method to integrate the domains of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"all the features that can be navigated to with the domain of the parent feature:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct RootFeature {","  \/\/ ...","","  var body: some ReducerOf<Self> {","    Reduce { state, action in ","      \/\/ Core logic for root feature","    }","    .forEach(\\.path, action: \\.path)","  }","}"]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"You do not need to specify ","type":"text"},{"type":"codeVoice","code":"Path()"},{"type":"text","text":" in a trailing closure of "},{"code":"forEach","type":"codeVoice"},{"text":" because it can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"automatically inferred from "},{"type":"codeVoice","code":"@Reducer enum Path"},{"type":"text","text":"."}]}]},{"inlineContent":[{"type":"text","text":"That completes the steps to integrate the child and parent features together for a navigation stack."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Next we must integrate the child and parent views together. This is done by a"},{"type":"text","text":" "},{"code":"NavigationStack","type":"codeVoice"},{"text":" using a special initializer that comes with this library, called","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","isActive":true},{"text":". This initializer takes 3","type":"text"},{"type":"text","text":" "},{"text":"arguments: a binding of a store focused in on ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference","isActive":true},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference"},{"type":"text","text":" in your domain, a"},{"text":" ","type":"text"},{"text":"trailing view builder for the root view of the stack, and another trailing view builder for all of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the views that can be pushed onto the stack:"}],"type":"paragraph"},{"code":["NavigationStack(","  path: \/\/ Store focused on StackState and StackAction",") {","  \/\/ Root view of the navigation stack","} destination: { store in","  \/\/ A view for each case of the Path.State enum","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"To fill in the first argument you only need to scope a binding of your store to the "},{"type":"codeVoice","code":"path"},{"type":"text","text":" state and"},{"type":"text","text":" "},{"type":"codeVoice","code":"path"},{"type":"text","text":" action you already hold in the root feature:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct RootView: View {","  @Bindable var store: StoreOf<RootFeature>","","  var body: some View {","    NavigationStack(","      path: $store.scope(state: \\.path, action: \\.path)","    ) {","      \/\/ Root view of the navigation stack","    } destination: { store in","      \/\/ A view for each case of the Path.State enum","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The root view can be anything you want, and would typically have some "},{"code":"NavigationLink","type":"codeVoice"},{"text":"s or other","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"buttons that push new data onto the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"text":" held in your domain.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"And the last trailing closure is provided a store of ","type":"text"},{"type":"codeVoice","code":"Path"},{"type":"text","text":" domain, and you can use the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case","isActive":true,"type":"reference"},{"type":"text","text":" computed property to destructure each case of the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" to obtain a store focused"},{"type":"text","text":" "},{"type":"text","text":"on just that case:"}]},{"type":"codeListing","syntax":"swift","code":["} destination: { store in","  switch store.case {","  case .addItem(let store):","  case .detailItem(let store):","  case .editItem(let store):","  }","}"]},{"inlineContent":[{"text":"This will give you compile-time guarantees that you have handled each case of the ","type":"text"},{"code":"Path.State","type":"codeVoice"},{"text":" enum,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which can be nice for when you add new types of destinations to the stack."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In each of these cases you can return any kind of view that you want, but ultimately you want to","type":"text"},{"type":"text","text":" "},{"text":"scope the store down to a specific case of the ","type":"text"},{"type":"codeVoice","code":"Path.State"},{"text":" enum:","type":"text"}]},{"type":"codeListing","code":["} destination: { store in","  switch store.case {","  case .addItem(let store):","    AddView(store: store)","  case .detailItem(let store):","    DetailView(store: store)","  case .editItem(let store):","    EditView(store: store)","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"And that is all it takes to integrate multiple child features together into a navigation stack,"},{"text":" ","type":"text"},{"type":"text","text":"and done so with concisely modeled domains. Once those steps are taken you can easily add"},{"text":" ","type":"text"},{"type":"text","text":"additional features to the stack by adding a new case to the "},{"type":"codeVoice","code":"Path"},{"text":" reducer state and action enums,","type":"text"},{"type":"text","text":" "},{"text":"and you get complete introspection into what is happening in each child feature from the parent.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Continue reading into "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration"},{"type":"text","text":" for more information on that."}],"type":"paragraph"},{"text":"Pushing features onto the stack","level":2,"type":"heading","anchor":"Pushing-features-onto-the-stack"},{"type":"paragraph","inlineContent":[{"text":"There are two primary ways to push features onto the stack once you have their domains integrated","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" in the view, as described above. The simplest way is to use the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)","isActive":true},{"type":"text","text":" initializer on"},{"type":"text","text":" "},{"type":"codeVoice","code":"NavigationLink"},{"text":", which requires you to specify the state of the feature you want to push onto the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"stack. You must specify the full state, going all the way back to the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer’s state:"}]},{"syntax":"swift","code":["Form {","  NavigationLink(","    state: RootFeature.Path.State.detail(DetailFeature.State())","  ) {","    Text(\"Detail\")","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the link is tapped a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/push(id:state:)"},{"type":"text","text":" action will be sent, causing the "},{"type":"codeVoice","code":"path"},{"type":"text","text":" "},{"type":"text","text":"collection to be mutated and appending the "},{"type":"codeVoice","code":".detail"},{"type":"text","text":" state to the stack."}]},{"inlineContent":[{"type":"text","text":"This is by far the simplest way to navigate to a screen, but it also has its drawbacks. In"},{"type":"text","text":" "},{"text":"particular, it makes modularity difficult since the view that holds onto the ","type":"text"},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":" must"},{"type":"text","text":" "},{"type":"text","text":"have access to the "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" type, which means it needs to build all of the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer,"},{"type":"text","text":" "},{"text":"including ","type":"text"},{"inlineContent":[{"type":"text","text":"every"}],"type":"emphasis"},{"type":"text","text":" feature that can be navigated to."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This hurts modularity because it is no longer possible to build each feature that can be presented"},{"text":" ","type":"text"},{"type":"text","text":"in the stack individually, in full isolation. You must build them all together. Technically you can"},{"text":" ","type":"text"},{"type":"text","text":"move all features’ "},{"type":"codeVoice","code":"State"},{"type":"text","text":" types (and only the "},{"code":"State","type":"codeVoice"},{"type":"text","text":" types) to a separate module, and then"},{"text":" ","type":"text"},{"type":"text","text":"features can depend on only that module without needing to build every feature’s reducer."}]},{"inlineContent":[{"text":"Another alternative is to forgo ","type":"text"},{"code":"NavigationLink","type":"codeVoice"},{"text":" entirely and just use ","type":"text"},{"type":"codeVoice","code":"Button"},{"type":"text","text":" that sends an action"},{"type":"text","text":" "},{"type":"text","text":"in the child feature’s domain:"}],"type":"paragraph"},{"syntax":"swift","code":["Form {","  Button(\"Detail\") {","    store.send(.detailButtonTapped)","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then the root feature can listen for that action and append to the ","type":"text"},{"code":"path","type":"codeVoice"},{"text":" with new state in order","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to drive navigation:"}]},{"syntax":"swift","code":["case .path(.element(id: _, action: .list(.detailButtonTapped))):","  state.path.append(.detail(DetailFeature.State()))","  return .none"],"type":"codeListing"},{"type":"heading","text":"Integration","anchor":"Integration","level":2},{"inlineContent":[{"type":"text","text":"Once your features are integrated together using the steps above, your parent feature gets instant"},{"text":" ","type":"text"},{"text":"access to everything happening inside the navigation stack. You can use this as a means to integrate","type":"text"},{"type":"text","text":" "},{"text":"the logic of the stack element features with the parent feature. For example, if you want to detect","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when the “Save” button inside the edit feature is tapped, you can simply destructure on that action."},{"type":"text","text":" "},{"text":"This consists of pattern matching on the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference"},{"text":", then the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","isActive":true},{"text":" action, then the feature you are interested in, and finally the","type":"text"},{"type":"text","text":" "},{"text":"action you are interested in:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["case let .path(.element(id: id, action: .editItem(.saveButtonTapped))):","  \/\/ ..."],"type":"codeListing"},{"inlineContent":[{"text":"Once inside that case you can then try extracting out the feature state so that you can perform","type":"text"},{"text":" ","type":"text"},{"text":"additional logic, such as popping the “edit” feature and saving the edited item to the database:","type":"text"}],"type":"paragraph"},{"code":["case let .path(.element(id: id, action: .editItem(.saveButtonTapped))):","  guard let editItemState = state.path[id: id]?.editItem","  else { return .none }","","  state.path.pop(from: id)","  return .run { _ in","    await self.database.save(editItemState.item)","  }"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Note that when destructuring the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","isActive":true},{"type":"text","text":" action we get access to not"},{"text":" ","type":"text"},{"type":"text","text":"only the action that happened in the child domain, but also the ID of the element in the stack."},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference"},{"type":"text","text":" automatically manages IDs for every feature added to the stack, which can be used"},{"type":"text","text":" "},{"type":"text","text":"to look up specific elements in the stack using"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:fileID:filePath:line:column:)"},{"text":" and pop elements from the stack using","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Dismissal","level":2,"text":"Dismissal","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Dismissing a feature in a stack is as simple as mutating the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference","isActive":true},{"type":"text","text":" using one of its"},{"type":"text","text":" "},{"type":"text","text":"methods, such as "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/popLast()","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)"},{"text":" and more:","type":"text"}]},{"code":["case .closeButtonTapped:","  state.popLast()","  return .none"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, in order to do this you must have access to that stack state, and usually only the parent"},{"text":" ","type":"text"},{"type":"text","text":"has access. But often we would like to encapsulate the logic of dismissing a feature to be inside"},{"type":"text","text":" "},{"text":"the child feature without needing explicit communication with the parent.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI provides a wonderful tool for allowing child "},{"type":"emphasis","inlineContent":[{"type":"text","text":"views"}]},{"text":" to dismiss themselves from the parent,","type":"text"},{"type":"text","text":" "},{"text":"all without any explicit communication with the parent. It’s an environment value called ","type":"text"},{"code":"dismiss","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and it can be used like so:","type":"text"}]},{"type":"codeListing","code":["struct ChildView: View {","  @Environment(\\.dismiss) var dismiss","  var body: some View {","    Button(\"Close\") { self.dismiss() }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"When ","type":"text"},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked, SwiftUI finds the closest parent view that is presented in the"},{"type":"text","text":" "},{"text":"navigation stack, and removes that state from the collection powering the stack. This can be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"incredibly useful, but it is also relegated to the view layer. It is not possible to use"},{"type":"text","text":" "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" elsewhere, like in an observable object, which would allow you to have nuanced logic"},{"type":"text","text":" "},{"text":"for dismissal such as validation or async work.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture has a similar tool, except it is appropriate to use from a reducer,","type":"text"},{"text":" ","type":"text"},{"text":"where the rest of your feature’s logic and behavior resides. It is accessed via the library’s","type":"text"},{"text":" ","type":"text"},{"text":"dependency management system (see ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","isActive":true},{"type":"text","text":") using "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","type":"reference"},{"type":"text","text":":"}]},{"code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { ","    case closeButtonTapped","    \/\/ ...","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .closeButtonTapped:","        return .run { _ in await self.dismiss() }","      \/\/ ...","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":" function is async which means it cannot be invoked directly inside a"},{"type":"text","text":" "},{"type":"text","text":"reducer. Instead it must be called from"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true,"type":"reference"},{"type":"text","text":"."}]}],"style":"note","type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"code":"self.dismiss()","type":"codeVoice"},{"text":" is invoked it will remove the corresponding value from the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"text":" ","type":"text"},{"text":"powering the navigation stack. It does this by sending a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","isActive":true},{"text":" action back","type":"text"},{"type":"text","text":" "},{"type":"text","text":"into the system, causing the feature state to be removed. This allows you to encapsulate the logic"},{"type":"text","text":" "},{"type":"text","text":"for dismissing a child feature entirely inside the child domain without explicitly communicating"},{"text":" ","type":"text"},{"type":"text","text":"with the parent."}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because dismissal is handled by sending an action, it is not valid to ever send an action"},{"type":"text","text":" "},{"text":"after invoking ","type":"text"},{"code":"dismiss()","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["return .run { send in ","  await self.dismiss()","  await send(.tick)  \/\/ ⚠️","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"To do so would be to send an action for a feature while its state is not present in the stack,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and that will cause a runtime warning in Xcode and a test failure when running tests."}]}],"type":"aside","style":"note"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI’s environment value "},{"code":"@Environment(\\.dismiss)","type":"codeVoice"},{"text":" and the Composable Architecture’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dependency value "},{"type":"codeVoice","code":"@Dependency(\\.dismiss)"},{"type":"text","text":" serve similar purposes, but are completely different"},{"text":" ","type":"text"},{"text":"types. SwiftUI’s environment value can only be used in SwiftUI views, and this library’s","type":"text"},{"type":"text","text":" "},{"text":"dependency value can only be used inside reducers.","type":"text"}]}],"name":"Warning","style":"warning"},{"level":2,"type":"heading","text":"Testing","anchor":"Testing"},{"inlineContent":[{"text":"A huge benefit of using the tools of this library to model navigation stacks is that testing becomes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"quite easy. Further, using “non-exhaustive testing” (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","isActive":true},{"type":"text","text":") can"},{"text":" ","type":"text"},{"text":"be very useful for testing navigation since you often only want to assert on a few high level","type":"text"},{"type":"text","text":" "},{"text":"details and not all state mutations and effects.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As an example, consider the following simple counter feature that wants to dismiss itself if its"},{"type":"text","text":" "},{"text":"count is greater than or equal to 5:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@Reducer","struct CounterFeature {","  @ObservableState","  struct State: Equatable {","    var count = 0","  }","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","","      case .incrementButtonTapped:","        state.count += 1","        return state.count >= 5","          ? .run { _ in await self.dismiss() }","          : .none","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then let’s embed that feature into a parent feature:"}]},{"syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State: Equatable {","    var path = StackState<Path.State>()","  }","  enum Action {","    case path(StackActionOf<Path>)","  }","","  @Reducer  ","  struct Path {","    enum State: Equatable { case counter(Counter.State) }","    enum Action { case counter(Counter.Action) }","    var body: some ReducerOf<Self> {","      Scope(state: \\.counter, action: \\.counter) { Counter() }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      \/\/ Logic and behavior for core feature.","    }","    .forEach(\\.path, action: \\.path) { Path() }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Now let’s try to write a test on the ","type":"text"},{"code":"Feature","type":"codeVoice"},{"type":"text","text":" reducer that proves that when the child counter"},{"type":"text","text":" "},{"text":"feature’s count is incremented above 5 it will dismiss itself. To do this we will construct a","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":" for "},{"type":"codeVoice","code":"Feature"},{"text":" that starts in a state with a single counter already on the stack:","type":"text"}]},{"code":["@Test","func dismissal() {","  let store = TestStore(","    initialState: Feature.State(","      path: StackState([","        CounterFeature.State(count: 3)","      ])","    )","  ) {","    CounterFeature()","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Then we can send the "},{"code":".incrementButtonTapped","type":"codeVoice"},{"text":" action in the counter child feature inside the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"stack in order to confirm that the count goes up by one, but in order to do so we need to provide"},{"type":"text","text":" "},{"type":"text","text":"an ID:"}],"type":"paragraph"},{"type":"codeListing","code":["await store.send(\\.path[id: ???].counter.incrementButtonTapped) {","  \/\/ ...","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"As mentioned in "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration","type":"reference","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"text":" automatically manages IDs","type":"text"},{"type":"text","text":" "},{"text":"for each feature and those IDs are mostly opaque to the outside. However, specifically in tests","type":"text"},{"type":"text","text":" "},{"type":"text","text":"those IDs are integers and generational, which means the ID starts at 0 and then for each feature"},{"text":" ","type":"text"},{"type":"text","text":"pushed onto the stack the global ID increments by one."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that when the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":" were constructed with a single element already in the stack"},{"type":"text","text":" "},{"text":"that it was given an ID of 0, and so that is the ID we can use when sending an action:","type":"text"}]},{"type":"codeListing","code":["await store.send(\\.path[id: 0].counter.incrementButtonTapped) {","  \/\/ ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we want to assert how the counter feature in the stack changes when the action is sent. To"},{"type":"text","text":" "},{"type":"text","text":"do this we must go through multiple layers: first subscript through the ID, then unwrap the"},{"text":" ","type":"text"},{"type":"text","text":"optional value returned from that subscript, then pattern match on the case of the "},{"type":"codeVoice","code":"Path.State"},{"text":" ","type":"text"},{"type":"text","text":"enum, and then perform the mutation."}]},{"type":"paragraph","inlineContent":[{"text":"The library provides two different tools to perform all of these steps in a single step. You can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use the "},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":" helper:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(\\.path[id: 0].counter.incrementButtonTapped) {","  XCTModify(&$0.path[id: 0], case: \\.counter) {","    $0.count = 4","  }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"XCTModify"},{"text":" function takes an ","type":"text"},{"type":"codeVoice","code":"inout"},{"type":"text","text":" piece of enum state as its first argument and a case"},{"text":" ","type":"text"},{"type":"text","text":"path for its second argument, and then uses the case path to extract the payload in that case,"},{"type":"text","text":" "},{"type":"text","text":"allow you to perform a mutation to it, and embed the data back into the enum. So, in the code"},{"text":" ","type":"text"},{"type":"text","text":"above we are subscripting into ID 0, isolating the "},{"type":"codeVoice","code":".counter"},{"type":"text","text":" case of the "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" enum,"},{"type":"text","text":" "},{"type":"text","text":"and mutating the "},{"type":"codeVoice","code":"count"},{"text":" to be 4 since it incremented by one. Further, if the case of ","type":"text"},{"type":"codeVoice","code":"$0.path[id: 0]"},{"type":"text","text":" "},{"type":"text","text":"didn’t match the case path, then a test failure would be emitted."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Another option is to use "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)","isActive":true},{"text":" to simultaneously subscript into an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ID on the stack "},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"text":" a case of the path enum:","type":"text"}],"type":"paragraph"},{"code":["await store.send(\\.path[id: 0].counter.incrementButtonTapped) {","  $0.path[id: 0, case: \\.counter]?.count = 4","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":" style is best when you have many things you need to modify on the state, and the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)","isActive":true},{"type":"text","text":" style is best when you have simple mutations."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Continuing with the test, we can send it one more time to see that the count goes up to 5:"}]},{"code":["await store.send(\\.path[id: 0].counter.incrementButtonTapped) {","  XCTModify(&$0.path[id: 0], case: \\.counter) {","    $0.count = 5","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we finally expect that the child dismisses itself, which manifests itself as the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)"},{"type":"text","text":" action being sent to pop the counter feature off the stack, which we"},{"type":"text","text":" "},{"type":"text","text":"can assert using the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","isActive":true},{"text":" method","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"on "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["await store.receive(\\.path.popFrom) {","  $0.path[id: 0] = nil","}"]},{"inlineContent":[{"type":"text","text":"If you need to assert that a specific child action is received, you can construct a case key path"},{"type":"text","text":" "},{"type":"text","text":"for a specific child element action by subscripting on the "},{"type":"codeVoice","code":"\\.path"},{"type":"text","text":" case with the element ID."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if the child feature performed an effect that sent an "},{"code":".response","type":"codeVoice"},{"type":"text","text":" action, you"},{"type":"text","text":" "},{"type":"text","text":"can test that it is received:"}]},{"syntax":"swift","code":["await store.receive(\\.path[id: 0].counter.response) {","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This shows how we can write very nuanced tests on how parent and child features interact with each","type":"text"},{"type":"text","text":" "},{"text":"other in a navigation stack.","type":"text"}]},{"inlineContent":[{"type":"text","text":"However, the more complex the features become, the more cumbersome testing their integration can be."},{"type":"text","text":" "},{"type":"text","text":"By default, "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"text":" requires us to be exhaustive in our assertions. We must assert on how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"every piece of state changes, how every effect feeds data back into the system, and we must make"},{"text":" ","type":"text"},{"type":"text","text":"sure that all effects finish by the end of the test (see "},{"text":"doc:Testing","type":"text"},{"type":"text","text":" for more info)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" also supports a form of testing known as “non-exhaustive testing” that allows you","type":"text"},{"text":" ","type":"text"},{"text":"to assert on only the parts of the features that you actually care about (see","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","isActive":true,"type":"reference"},{"text":" for more info).","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if we turn off exhaustivity on the test store (see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"type":"text","text":") then we"},{"type":"text","text":" "},{"text":"can assert at a high level that when the increment button is tapped twice that eventually we receive","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","type":"reference","isActive":true},{"type":"text","text":" action:"}]},{"code":["@Test","func dismissal() {","  let store = TestStore(","    initialState: Feature.State(","      path: StackState([","        CounterFeature.State(count: 3)","      ])","    )","  ) {","    CounterFeature()","  }","  store.exhaustivity = .off","","  await store.send(\\.path[id: 0].counter.incrementButtonTapped)","  await store.send(\\.path[id: 0].counter.incrementButtonTapped)","  await store.receive(\\.path.popFrom)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This essentially proves the same thing that the previous test proves, but it does so in much fewer"},{"type":"text","text":" "},{"text":"lines and is more resilient to future changes in the features that we don’t necessarily care about.","type":"text"}]},{"type":"heading","level":2,"text":"StackState vs NavigationPath","anchor":"StackState-vs-NavigationPath"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI comes with a powerful type for modeling data in navigation stacks called"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath","isActive":true,"type":"reference"},{"text":", and so you might wonder why we created our own data type,","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":", instead of leveraging "},{"code":"NavigationPath","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"NavigationPath","type":"codeVoice"},{"type":"text","text":" data type is a type-erased list of data that is tuned specifically for"},{"text":" ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":"s. It allows you to maximally decouple features in the stack since you can add any"},{"text":" ","type":"text"},{"type":"text","text":"kind of data to a path, as long as it is "},{"code":"Hashable","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var path = NavigationPath()","path.append(1)","path.append(\"Hello\")","path.append(false)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And SwiftUI interprets that data by describing what view should be pushed onto the stack"},{"text":" ","type":"text"},{"text":"corresponding to a type of data:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct RootView: View {","  @State var path = NavigationPath()","","  var body: some View {","    NavigationStack(path: self.$path) {","      Form {","        \/\/ ...","      }","      .navigationDestination(for: Int.self) { integer in ","        \/\/ ...","      }","      .navigationDestination(for: String.self) { string in ","        \/\/ ...","      }","      .navigationDestination(for: Bool.self) { bool in ","        \/\/ ...","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"This can be powerful, but it does come with some downsides. Because the underlying data is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type-erased, SwiftUI has decided to not expose much API on the data type. For example, the only"},{"text":" ","type":"text"},{"text":"things you can do with a path are append data to the end of it, as seen above, or remove data","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from the end of it:"}]},{"syntax":"swift","code":["path.removeLast()"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Or count the elements in the path:","type":"text"}]},{"type":"codeListing","code":["path.count"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"And that is all. You can’t insert or remove elements from anywhere but the end, and you can’t even","type":"text"},{"type":"text","text":" "},{"text":"iterate over the path:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let path: NavigationPath = …","for element in path {  \/\/ 🛑","}"]},{"type":"paragraph","inlineContent":[{"text":"This can make it very difficult to analyze what is on the stack and aggregate data across the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"entire stack."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture’s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" serves a similar purpose as "},{"type":"codeVoice","code":"NavigationPath"},{"type":"text","text":", but"},{"text":" ","type":"text"},{"type":"text","text":"with different trade offs:"}]},{"items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"text":" is fully statically typed, and so you cannot add just ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" kind of data to it."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"But, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" conforms to the "},{"code":"Collection","type":"codeVoice"},{"text":" protocol (as well as ","type":"text"},{"type":"codeVoice","code":"RandomAccessCollection"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":"), which gives you access to a lot of methods for manipulating the","type":"text"},{"type":"text","text":" "},{"text":"collection and introspecting what is inside the stack.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your feature’s data does not need to be "},{"code":"Hashable","type":"codeVoice"},{"text":" to put it in a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"text":". The data type","type":"text"},{"type":"text","text":" "},{"text":"manages stable identifiers for your features under the hood, and automatically derives a hash","type":"text"},{"text":" ","type":"text"},{"text":"value from those identifiers.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We feel that "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":" offers a nice balance between full runtime flexibility and static,"},{"type":"text","text":" "},{"text":"compile-time guarantees, and that it is the perfect tool for modeling navigation stacks in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Composable Architecture."}]},{"type":"heading","text":"UIKit","anchor":"UIKit","level":2},{"inlineContent":[{"type":"text","text":"The library also comes with a tool that allows you to use UIKit’s "},{"type":"codeVoice","code":"UINavigationController"},{"text":" in a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state-driven manner. If you model your domains using "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":" as described above, then you"},{"type":"text","text":" "},{"type":"text","text":"can use the special "},{"type":"codeVoice","code":"NavigationStackController"},{"type":"text","text":" type to implement a view controller for your stack:"}],"type":"paragraph"},{"type":"codeListing","code":["class AppController: NavigationStackController {","  private var store: StoreOf<AppFeature>!","","  convenience init(store: StoreOf<AppFeature>) {","    @UIBindable var store = store","","    self.init(path: $store.scope(state: \\.path, action: \\.path)) {","      RootViewController(store: store)","    } destination: { store in ","      switch store.case {","      case .addItem(let store):","        AddViewController(store: store)","      case .detailItem(let store):","        DetailViewController(store: store)","      case .editItem(let store):","        EditViewController(store: store)","      }","    }","","    self.model = model","  }","}"],"syntax":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/element(id:action:)":{"url":"\/documentation\/composablearchitecture\/stackaction\/element(id:action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","type":"topic","title":"StackAction.element(id:action:)","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"element","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"id"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","text":"StackElementID"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"An action sent to the associated stack element at a given identifier."}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackActionOf":{"abstract":[{"type":"text","text":"A convenience type alias for referring to a stack action of a given reducer’s domain."}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StackActionOf"}],"title":"StackActionOf","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"StackActionOf"}],"type":"topic","url":"\/documentation\/composablearchitecture\/stackactionof"},"#Basics":{"title":"Basics","type":"link","identifier":"#Basics","titleInlineContent":[{"type":"text","text":"Basics"}],"url":"#Basics"},"#Pushing-features-onto-the-stack":{"title":"Pushing features onto the stack","type":"link","identifier":"#Pushing-features-onto-the-stack","titleInlineContent":[{"type":"text","text":"Pushing features onto the stack"}],"url":"#Pushing-features-onto-the-stack"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/subscript(id:fileID:filePath:line:column:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:fileID:filePath:line:column:)","kind":"symbol","fragments":[{"text":"subscript","kind":"keyword"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"_HashableStaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"text":" _: ","kind":"text"},{"text":"_HashableStaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/stackstate\/subscript(id:fileid:filepath:line:column:)","abstract":[{"type":"text","text":"Accesses the value associated with the given id for reading and writing."}],"title":"subscript(id:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Non-exhaustive-testing":{"abstract":[],"title":"Non-exhaustive testing","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","url":"\/documentation\/composablearchitecture\/testing#Non-exhaustive-testing","kind":"section"},"https://developer.apple.com/documentation/swiftui/navigationpath":{"title":"NavigationPath","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath","titleInlineContent":[{"type":"codeVoice","code":"NavigationPath"}],"url":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/popFrom(id:)":{"title":"StackAction.popFrom(id:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","url":"\/documentation\/composablearchitecture\/stackaction\/popfrom(id:)","abstract":[{"type":"text","text":"An action sent to dismiss the associated stack element at a given identifier."}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"popFrom"},{"kind":"text","text":"("},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","text":"StackElementID"},{"kind":"text","text":")"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState":{"url":"\/documentation\/composablearchitecture\/stackstate","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","navigatorTitle":[{"kind":"identifier","text":"StackState"}],"type":"topic","title":"StackState","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackState"}],"abstract":[{"text":"A list of data representing the content of a navigation stack.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","url":"\/documentation\/composablearchitecture\/reducer","type":"topic","title":"Reducer","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/push(id:state:)":{"url":"\/documentation\/composablearchitecture\/stackaction\/push(id:state:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/push(id:state:)","type":"topic","title":"StackAction.push(id:state:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"push","kind":"identifier"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","text":"StackElementID"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"text":"State","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"An action sent to present the given state at a given identifier in a navigation stack. This","type":"text"},{"type":"text","text":" "},{"text":"action is typically sent from the view via the ","type":"text"},{"type":"codeVoice","code":"NavigationLink(value:)"},{"text":" initializer.","type":"text"}],"kind":"symbol","role":"symbol"},"#Integration":{"title":"Integration","type":"link","identifier":"#Integration","titleInlineContent":[{"type":"text","text":"Integration"}],"url":"#Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"exhaustivity","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Exhaustivity","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"title":"exhaustivity"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationLink/init(state:label:fileID:filePath:line:column:)":{"kind":"symbol","abstract":[{"text":"Creates a navigation link that presents the view corresponding to an element of","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"text":".","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/swiftui\/navigationlink\/init(state:label:fileid:filepath:line:column:)","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"P","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"L","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"label"},{"text":": () -> ","kind":"text"},{"text":"L","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Label","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"View"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Destination"},{"text":" is ","type":"text"},{"code":"Never","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol","title":"init(state:label:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"type":"topic","title":"TestStore","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/subscript(id:case:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)","role":"symbol","url":"\/documentation\/composablearchitecture\/stackstate\/subscript(id:case:)","kind":"symbol","type":"topic","fragments":[{"text":"subscript","kind":"keyword"},{"text":"<","kind":"text"},{"text":"Case","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"id"},{"text":" _: ","kind":"text"},{"text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"case"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Case"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Case"},{"text":"?","kind":"text"}],"title":"subscript(id:case:)","abstract":[{"type":"text","text":"Accesses the value associated with the given id and case for reading and writing."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackElementID":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackElementID","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"StackElementID","kind":"identifier"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/stackelementid","title":"StackElementID","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"An opaque type that identifies an element of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"StackElementID"}]},"#UIKit":{"title":"UIKit","type":"link","identifier":"#UIKit","titleInlineContent":[{"type":"text","text":"UIKit"}],"url":"#UIKit"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","kind":"article","url":"\/documentation\/composablearchitecture\/dependencymanagement","title":"Dependencies","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"text":" ","type":"text"},{"text":"any reducer.","type":"text"}],"role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb":{"abstract":[{"text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent state."}],"role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:filepath:line:column:)-9svqb","title":"forEach(_:action:destination:fileID:filePath:line:column:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"forEach"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"DestinationState"},{"text":", ","kind":"text"},{"text":"DestinationAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Destination","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"kind":"text","text":", "},{"text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":", ","kind":"text"},{"text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"text":"destination","kind":"externalParam"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":">\n","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Enum-state":{"abstract":[],"title":"Enum state","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","url":"\/documentation\/composablearchitecture\/treebasednavigation#Enum-state","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","role":"symbol","title":"run(priority:operation:catch:fileID:filePath:line:column:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"catch"},{"text":": ((any ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DismissEffect"}],"abstract":[{"text":"An effect that dismisses the current presentation.","type":"text"}],"url":"\/documentation\/composablearchitecture\/dismisseffect","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","navigatorTitle":[{"text":"DismissEffect","kind":"identifier"}],"title":"DismissEffect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:)":{"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"DestinationState"},{"text":", ","kind":"text"},{"text":"DestinationAction","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","text":"StackAction"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"DestinationAction","kind":"typeIdentifier"},{"kind":"text","text":">>) -> "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"text":">\n","kind":"text"}],"abstract":[{"type":"text","text":"A special overload of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb","isActive":true,"type":"reference"},{"text":" for enum","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"reducers."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","title":"forEach(_:action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackBasedNavigation#Integration":{"abstract":[],"title":"Integration","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration","url":"\/documentation\/composablearchitecture\/stackbasednavigation#Integration","kind":"section"},"#StackState-vs-NavigationPath":{"type":"link","title":"StackState vs NavigationPath","identifier":"#StackState-vs-NavigationPath","titleInlineContent":[{"type":"text","text":"StackState vs NavigationPath"}],"url":"#StackState-vs-NavigationPath"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/pop(from:)":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"pop"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","text":"StackElementID"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Pops the element corresponding to "},{"type":"codeVoice","code":"id"},{"text":" from the stack, and all elements after it.","type":"text"}],"url":"\/documentation\/composablearchitecture\/stackstate\/pop(from:)","kind":"symbol","role":"symbol","title":"pop(from:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"url":"\/documentation\/composablearchitecture\/navigation","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"title":"Navigation","kind":"article","type":"topic","role":"collectionGroup"},"#Testing":{"type":"link","title":"Testing","identifier":"#Testing","titleInlineContent":[{"type":"text","text":"Testing"}],"url":"#Testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/case":{"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"CaseReducerState","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"State.StateReducer.Action"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"text":"A destructurable view of a store on a collection of cases.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"`case`"},{"kind":"text","text":": "},{"text":"State","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture16CaseReducerStateP0eD0Qa","text":"StateReducer","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CaseScope","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11CaseReducerP0C5ScopeQa"}],"kind":"symbol","title":"case","url":"\/documentation\/composablearchitecture\/store\/case","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-53wic":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"receive","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s8DurationV","text":"Duration","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Asserts an action was received matching a case path and asserts how the state changes."}],"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-53wic","kind":"symbol","role":"symbol","title":"receive(_:timeout:assert:fileID:file:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"role":"symbol","title":"PresentationAction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"PresentationAction","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:fileID:filePath:line:column:)":{"url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:fileid:filepath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Root","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}]},"kind":"symbol","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Action"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Destination"},{"text":", ","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"path","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Binding","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","text":"StackState"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","text":"StackAction"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">>>, ","kind":"text"},{"text":"root","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"destination","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Destination"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Drives a navigation stack with a store.","type":"text"}],"title":"init(path:root:destination:fileID:filePath:line:column:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/popLast()":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/popLast()","url":"\/documentation\/composablearchitecture\/stackstate\/poplast()","role":"symbol","abstract":[],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"popLast","kind":"identifier"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":"?"}],"conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"BidirectionalCollection","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"title":"popLast()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"url":"\/documentation\/composablearchitecture\/effect","type":"topic","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"title":"StackAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","url":"\/documentation\/composablearchitecture\/stackaction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"StackAction","kind":"identifier"}]},"#Dismissal":{"type":"link","title":"Dismissal","titleInlineContent":[{"type":"text","text":"Dismissal"}],"url":"#Dismissal","identifier":"#Dismissal"}}}