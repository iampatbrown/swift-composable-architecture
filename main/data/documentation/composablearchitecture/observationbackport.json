{"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"article","roleHeading":"Article","title":"Observation backport"},"abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as well as the caveats of using the backported tools."}],"seeAlsoSections":[{"generated":true,"title":"Integrations","anchor":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/observationbackport"]}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With version 1.7 of the Composable Architecture we have introduced support for Swift 5.9‚Äôs"},{"type":"text","text":" "},{"type":"text","text":"observation tools, "},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"text":" we have backported those tools to work in iOS 13 and later. Using the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"observation tools in pre-iOS 17 does require a few additional steps and there are some gotchas to be"},{"text":" ","type":"text"},{"text":"aware of.","type":"text"}]},{"level":2,"type":"heading","anchor":"The-Perception-framework","text":"The Perception framework"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture comes with a framework known as Perception, which is our backport of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift 5.9‚Äôs Observation to iOS 13, macOS 12, tvOS 13 and watchOS 6. For all of the tools in the"},{"text":" ","type":"text"},{"text":"Observation framework there is a corresponding tool in Perception.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, instead of the "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":" macro, there is the "},{"code":"@Perceptible","type":"codeVoice"},{"text":" macro:","type":"text"}]},{"syntax":"swift","code":["@Perceptible","class CounterModel {","  var count = 0","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, in order for a view to properly observe changes to a ‚Äúperceptible‚Äù model, you must"},{"type":"text","text":" "},{"text":"remember to wrap the contents of your view in the ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":" view:"}],"type":"paragraph"},{"code":["struct CounterView: View {","  let model = CounterModel()","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(self.model.count.description)","        Button(\"Decrement\") { self.model.count -= 1 }","        Button(\"Increment\") { self.model.count += 1 }","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This will make sure that the view subscribes to any fields accessed in the "},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" model so"},{"text":" ","type":"text"},{"type":"text","text":"that changes to those fields invalidate the view and cause it to re-render."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If a field of a "},{"type":"codeVoice","code":"@Percetible"},{"type":"text","text":" model is accessed in a view while "},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" inside","type":"text"},{"text":" ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":", then a runtime warning will be triggered:","type":"text"}],"type":"paragraph"},{"name":"üü£ Runtime Warning","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Perceptible state was accessed but is not being tracked. Track changes to"},{"type":"text","text":" "},{"text":"state by wrapping your view in a ‚ÄòWithPerceptionTracking‚Äô view.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To debug this, expand the warning in the Issue Navigator of Xcode (‚åò5), and click through the stack"},{"type":"text","text":" "},{"text":"frames displayed to find the line in your view where you are accessing state without being inside","type":"text"},{"text":" ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"type":"text","text":"."}]},{"level":2,"type":"heading","text":"Bindings","anchor":"Bindings"},{"inlineContent":[{"type":"text","text":"If you want to derive bindings from the store (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","isActive":true},{"text":" for more information), then you","type":"text"},{"text":" ","type":"text"},{"text":"would typically use the ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"text":" property wrapper that comes with SwiftUI:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct MyView: View {","  @Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"]},{"inlineContent":[{"text":"However, ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"text":" is iOS 17+. So, the Perception library comes with a tool that can be used in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"its place until you can target iOS 17 and later. You just have to qualify "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" with the"},{"type":"text","text":" "},{"code":"Perception","type":"codeVoice"},{"text":" namespace:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct MyView: View {","  @Perception.Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"]},{"type":"heading","text":"Gotchas","level":2,"anchor":"Gotchas"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a few gotchas to be aware of when using "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":"."}]},{"type":"heading","level":3,"text":"Lazy view closures","anchor":"Lazy-view-closures"},{"type":"paragraph","inlineContent":[{"text":"There are many ‚Äúlazy‚Äù closures in SwiftUI that evaluate only when something happens in the view, and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"not necessarily in the same stack frames as the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the view. For example, the trailing"},{"text":" ","type":"text"},{"text":"closure of ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"type":"text","text":" is called "},{"inlineContent":[{"text":"after","type":"text"}],"type":"emphasis"},{"type":"text","text":" the "},{"code":"body","type":"codeVoice"},{"type":"text","text":" of the view has been computed."}]},{"inlineContent":[{"type":"text","text":"This means that even if you wrap the body of the view in "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    Text(store.title)","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"‚Ä¶the access to the row‚Äôs "},{"type":"codeVoice","code":"store.title"},{"type":"text","text":" happens "},{"type":"emphasis","inlineContent":[{"type":"text","text":"outside"}]},{"type":"text","text":" "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":", and hence will","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"not work and will trigger a runtime warning as described above."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fix for this is to wrap the content of the trailing closure in another "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    WithPerceptionTracking {","      Text(store.title)","    }","  }","}"],"type":"codeListing"},{"anchor":"Mixing-legacy-and-modern-features-together","text":"Mixing legacy and modern features together","level":3,"type":"heading"},{"inlineContent":[{"text":"Some problems can arise when mixing together features built in the ‚Äúlegacy‚Äù style, using","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":", and features built in the ‚Äúmodern‚Äù style, using the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"reference"},{"type":"text","text":" macro. The problems mostly manifest themselves as re-computing view bodies"},{"text":" ","type":"text"},{"text":"more often than necessary, but that can also put strain on SwiftUI‚Äôs ability to figure out what","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state changed, and can cause glitches or exacerbate navigation bugs."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","isActive":true},{"text":" for more information about this.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"abstract":[{"text":"A ","type":"text"},{"code":"ViewStore","type":"codeVoice"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"deprecated":true,"role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/viewstore","title":"ViewStore","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"kind":"article","url":"\/documentation\/composablearchitecture\/uikit","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","type":"topic","title":"UIKit Integration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"title":"Adopting Swift concurrency","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","url":"\/documentation\/composablearchitecture\/swiftconcurrency","type":"topic","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift‚Äôs structured concurrency."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7#Incrementally-migrating":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","url":"\/documentation\/composablearchitecture\/migratingto1.7#Incrementally-migrating","type":"topic","abstract":[],"kind":"section","title":"Incrementally migrating"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"url":"\/documentation\/composablearchitecture\/observablestate()","role":"symbol","kind":"symbol","title":"ObservableState()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","url":"\/documentation\/composablearchitecture\/bindings","kind":"article","type":"topic","title":"Working with SwiftUI bindings","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"navigatorTitle":[{"text":"Store","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/store","title":"Store","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/withviewstore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"text":"by a view builder.","type":"text"}],"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"deprecated":true,"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"topic","title":"WithViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"role":"collectionGroup","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","title":"SwiftUI Integration","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"}}}