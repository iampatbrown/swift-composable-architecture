{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"generated":true,"title":"Supporting reducers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Optional"],"anchor":"Supporting-reducers"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingReducer"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"State"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ViewAction"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"text":" == ","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction\/State","preciseIdentifier":"s:22ComposableArchitecture14BindableActionP5StateQa"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","preciseIdentifier":"s:22ComposableArchitecture14BindableActionP","kind":"typeIdentifier","text":"BindableAction"}]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This reducer should typically be composed into the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true},{"type":"text","text":" of your"},{"text":" ","type":"text"},{"text":"feature’s reducer:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  struct State {","    @BindingState var isOn = false","    \/\/ More properties...","  }","  enum Action: BindableAction {","    case binding(BindingAction<State>)","    \/\/ More actions","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","    Reduce { state, action in","      \/\/ Your feature's logic...","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This makes it so that the binding’s logic is run before the feature’s logic, "},{"inlineContent":[{"type":"text","text":"i.e."}],"type":"emphasis"},{"text":" you will","type":"text"},{"type":"text","text":" "},{"text":"only see the state after the binding was written. If you want to react to the state ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"text":" the","type":"text"},{"type":"text","text":" "},{"text":"binding was written, you can flip the order of the composition:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var body: some ReducerOf<Self> {","  Reduce { state, action in","    \/\/ Your feature's logic...","  }","  BindingReducer()","}"]},{"inlineContent":[{"text":"If you forget to compose the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","isActive":true},{"text":" into your feature’s reducer, then when a binding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is written to it will cause a runtime purple Xcode warning letting you know what needs to be"},{"type":"text","text":" "},{"text":"fixed.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"topicSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/init()","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/init(action:)-33ljj","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/init(action:)-8fpg"],"title":"Initializers","anchor":"Initializers"},{"generated":true,"title":"Instance Methods","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/reduce(into:action:)"],"anchor":"Instance-Methods"},{"title":"Default Implementations","anchor":"Default-Implementations","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/Reducer-Implementations"]}],"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"externalID":"s:22ComposableArchitecture14BindingReducerV","role":"symbol","symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingReducer"}],"roleHeading":"Structure","title":"BindingReducer","navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}]},"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"],"type":"conformsTo"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/bindingreducer"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-20w8t":{"abstract":[{"text":"The content and behavior of a reducer that is composed from other reducers.","type":"text"}],"required":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","role":"symbol","type":"topic","kind":"symbol","title":"body","url":"\/documentation\/composablearchitecture\/reducer\/body-20w8t","defaultImplementations":2,"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP4BodyQa","text":"Body"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer/init()":{"title":"init()","kind":"symbol","url":"\/documentation\/composablearchitecture\/bindingreducer\/init()","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/init()","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Initializes a reducer that updates bindable state when it receives binding actions."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Swift/Optional":{"abstract":[],"fragments":[{"kind":"keyword","text":"extension"},{"kind":"text","text":" "},{"text":"Optional","preciseIdentifier":"s:Sq","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/swift\/optional","type":"topic","navigatorTitle":[{"text":"Optional","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Optional","role":"symbol","title":"Optional","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"abstract":[{"text":"A reducer that updates bindable state when it receives binding actions.","type":"text"}],"title":"BindingReducer","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","url":"\/documentation\/composablearchitecture\/bindingreducer","navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}],"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingReducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"url":"\/documentation\/composablearchitecture\/bindingaction","abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingAction","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"title":"BindingAction","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EmptyReducer":{"url":"\/documentation\/composablearchitecture\/emptyreducer","role":"symbol","type":"topic","title":"EmptyReducer","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmptyReducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","navigatorTitle":[{"text":"EmptyReducer","kind":"identifier"}],"abstract":[{"text":"A reducer that does nothing.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer/Reducer-Implementations":{"url":"\/documentation\/composablearchitecture\/bindingreducer\/reducer-implementations","type":"topic","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/Reducer-Implementations","kind":"article","role":"collectionGroup","title":"Reducer Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer/init(action:)-33ljj":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"ViewAction","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"url":"\/documentation\/composablearchitecture\/bindingreducer\/init(action:)-33ljj","type":"topic","kind":"symbol","abstract":[],"title":"init(action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/init(action:)-33ljj","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer/reduce(into:action:)":{"title":"reduce(into:action:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/bindingreducer\/reduce(into:action:)","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/reduce(into:action:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reduce"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"url":"\/documentation\/composablearchitecture\/effect","type":"topic","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","url":"\/documentation\/composablearchitecture\/reducer","type":"topic","title":"Reducer","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction/State":{"role":"symbol","url":"\/documentation\/composablearchitecture\/bindableaction\/state","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction\/State","required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"State"}],"abstract":[{"type":"text","text":"The root state type that contains bindable fields."}],"title":"State","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"url":"\/documentation\/composablearchitecture\/bindableaction","abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"type":"text","text":" case that holds a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","isActive":true},{"type":"text","text":"."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindableAction","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"BindableAction"}],"title":"BindableAction","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer/init(action:)-8fpg":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/init(action:)-8fpg","url":"\/documentation\/composablearchitecture\/bindingreducer\/init(action:)-8fpg","type":"topic","role":"symbol","abstract":[],"title":"init(action:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ViewAction"},{"text":"?)","kind":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"role":"collectionGroup","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","title":"SwiftUI Integration","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"}}}