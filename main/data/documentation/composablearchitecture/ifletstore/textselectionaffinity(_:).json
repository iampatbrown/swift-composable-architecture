{"variants":[{"paths":["\/documentation\/composablearchitecture\/ifletstore\/textselectionaffinity(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/textSelectionAffinity(_:)","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"textSelectionAffinity","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI21TextSelectionAffinityO","text":"TextSelectionAffinity"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"}],"title":"textSelectionAffinity(_:)","roleHeading":"Instance Method","symbolKind":"method","modules":[{"name":"ComposableArchitecture","relatedModules":["SwiftUICore"]}],"platforms":[{"unavailable":false,"name":"iOS","introducedAt":"18.0","beta":false,"deprecated":false},{"unavailable":false,"name":"macOS","introducedAt":"15.0","beta":false,"deprecated":false},{"beta":false,"unavailable":false,"name":"tvOS","deprecated":false,"introducedAt":"18.0"},{"introducedAt":"2.0","deprecated":false,"unavailable":false,"name":"visionOS","beta":false},{"deprecated":false,"beta":false,"unavailable":false,"name":"watchOS","introducedAt":"11.0"}],"extendedModule":"SwiftUICore","role":"symbol","externalID":"s:7SwiftUI4ViewPAAE21textSelectionAffinityyQrAA04TexteF0OF::SYNTHESIZED::s:22ComposableArchitecture10IfLetStoreV"},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"nonisolated"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"textSelectionAffinity"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"affinity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7SwiftUI21TextSelectionAffinityO","text":"TextSelectionAffinity","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP","text":"View"},{"text":"\n","kind":"text"}]}]}],"abstract":[{"text":"Inherited from ","type":"text"},{"code":"View.textSelectionAffinity(_:)","type":"codeVoice"},{"type":"text","text":"."}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/View-Implementations":{"type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore\/view-implementations","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations","role":"collectionGroup","title":"View Implementations","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"title":"Deprecations","url":"\/documentation\/composablearchitecture\/swiftuideprecations","type":"topic","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}],"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"role":"collectionGroup","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","title":"SwiftUI Integration","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/textSelectionAffinity(_:)":{"abstract":[],"role":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore\/textselectionaffinity(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"textSelectionAffinity","kind":"identifier"},{"kind":"text","text":"("},{"text":"TextSelectionAffinity","preciseIdentifier":"s:7SwiftUI21TextSelectionAffinityO","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/textSelectionAffinity(_:)","type":"topic","title":"textSelectionAffinity(_:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"title":"IfLetStore","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"IfLetStore","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"url":"\/documentation\/composablearchitecture\/ifletstore","deprecated":true}}}